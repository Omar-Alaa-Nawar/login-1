{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-ef6cb2a175202b12ed9ce36e148518167172c3f1d0ef3d78f11792cd5db87564b46339239926668400df6509ca3d778ffe3003bf8df918c4a302019249c38cf7",
            "file": "src/app/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "authenticate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRole",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthenticatedUser",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private router: Router) {}\r\n\r\n  authenticate() {\r\n    localStorage.setItem('isAuthenticated', 'true');\r\n    console.log('User authenticated');\r\n  }\r\n\r\n  setRole(role: string) {\r\n    localStorage.setItem('role', role);\r\n    console.log('Role set:', role);\r\n  }\r\n\r\n  getRole(): string | null {\r\n    const role = localStorage.getItem('role');\r\n    console.log('Getting role:', role);\r\n    return role;\r\n  }\r\n\r\n  isAuthenticatedUser(): boolean {\r\n    const isAuthenticated = localStorage.getItem('isAuthenticated') === 'true';\r\n    console.log('Checking authentication:', isAuthenticated);\r\n    return isAuthenticated;\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('isAuthenticated');\r\n    localStorage.removeItem('role');\r\n    this.router.navigate(['/login']);\r\n    console.log('User logged out');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-e5fd542d7a5327a767aeda86c5462de9f68a08011dd3db6faf922e3f41bb392991a867f980633c382e095a43d00b5807f6996aff5f9904e65213e2b95e30afc7",
            "file": "src/app/local-storage.service.ts",
            "properties": [
                {
                    "name": "loggedInEmailKey",
                    "defaultValue": "'loggedInEmail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "storageKey",
                    "defaultValue": "'users'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearLoggedInEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLoggedInEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserData",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveUserData",
                    "args": [
                        {
                            "name": "registerData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLoggedInEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n  \r\n  private readonly storageKey = 'users';  // Key used to store users array in local storage\r\n  private readonly loggedInEmailKey = 'loggedInEmail';  // Key for the logged-in email\r\n\r\n  constructor() {}\r\n\r\n  // Fetch user data by email\r\n  getUserData(email: string): any {\r\n    const usersData = localStorage.getItem(this.storageKey);\r\n    if (usersData) {\r\n      const users = JSON.parse(usersData);\r\n      const user = users.find((u: { email: string }) => u.email === email);\r\n      if (user) {\r\n        const { password, confirmPassword, ...userWithoutPasswords } = user;  // Remove password fields\r\n        return userWithoutPasswords;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Save or update a user's registration data\r\n  saveUserData(registerData: any): void {\r\n    const usersData = localStorage.getItem(this.storageKey);\r\n    const users = usersData ? JSON.parse(usersData) : [];\r\n    \r\n    const existingUserIndex = users.findIndex((u: { email: string }) => u.email === registerData.email);\r\n    \r\n    if (existingUserIndex >= 0) {\r\n      users[existingUserIndex] = registerData; // Update existing user data\r\n    } else {\r\n      users.push(registerData); // Add new user data\r\n    }\r\n\r\n    localStorage.setItem(this.storageKey, JSON.stringify(users));\r\n  }\r\n\r\n  // Set the logged-in email to local storage\r\n  setLoggedInEmail(email: string): void {\r\n    localStorage.setItem(this.loggedInEmailKey, email);\r\n  }\r\n\r\n  // Retrieve the logged-in email\r\n  getLoggedInEmail(): string | null {\r\n    return localStorage.getItem(this.loggedInEmailKey);\r\n  }\r\n\r\n  // Clear logged-in email from local storage (e.g., on sign-out)\r\n  clearLoggedInEmail(): void {\r\n    localStorage.removeItem(this.loggedInEmailKey);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AdminGuard",
            "id": "injectable-AdminGuard-60628611a6e75470a10a3f5054b04ac667b3f8120667b20f064b972445210033e7a91ac042cc357c95f161985dcf881fffa7da33757b82a4548c82d0b2f5fd7b",
            "file": "src/app/admin.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '../app/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(): boolean {\r\n    const role = this.authService.getRole();\r\n    if (this.authService.isAuthenticatedUser() && role === 'admin') {\r\n      return true;\r\n    }\r\n    this.router.navigate(['/404']);\r\n    return false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        },
        {
            "name": "EmployeeGuard",
            "id": "injectable-EmployeeGuard-840724d241dd57389dd321f25527f890723e04f81d6149acd957b2e3707df7018991452f212356b8afa1fd79098ff9c0a7ab36690eaf2f2b8ed7915d9ca2c875",
            "file": "src/app/employee.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '../app/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EmployeeGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(): boolean {\r\n    const role = this.authService.getRole();\r\n    if (this.authService.isAuthenticatedUser() && (role === 'employee' || role === 'manager' || role === 'admin')) {\r\n      return true;\r\n    }\r\n    this.router.navigate(['/404']);\r\n    return false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        },
        {
            "name": "ManagerGuard",
            "id": "injectable-ManagerGuard-ab089cd9511ef20062feb5a9d048a95853609969dc9ed305d254b07e8575b567de95e86a03a9a3dd61c25a949f5db50626144c5aa54eb8eb476f88c6ca418909",
            "file": "src/app/manager.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '../app/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ManagerGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(): boolean {\r\n    const role = this.authService.getRole();\r\n    if (this.authService.isAuthenticatedUser() && (role === 'manager' || role === 'admin')) {\r\n      return true;\r\n    }\r\n    this.router.navigate(['/404']);\r\n    return false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        },
        {
            "name": "RoleGuard",
            "id": "injectable-RoleGuard-02b9ad4bc80542d0d4735111c23a6c13a80de89eaa4618110d6aa99840d0c3d87d3c118eebe01fc68cd8561abb5286af7d6c3194a930bfc603b2917ec2c79350",
            "file": "src/app/role.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RoleGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const role = this.authService.getRole();  // Get the role from AuthService\r\n    const url = state.url;\r\n\r\n    console.log('RoleGuard Check:', role, 'Trying to access:', url);\r\n\r\n    if (!this.authService.isAuthenticatedUser()) {\r\n      console.log('User is not authenticated. Redirecting to login.');\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n\r\n    // Authorization logic based on role\r\n    if (role === 'admin') {\r\n      // Admin can access any dashboard\r\n      return true;\r\n    } else if (role === 'manager') {\r\n      // Manager can access manager-dashboard or employee-dashboard\r\n      if (url.includes('manager-dashboard') || url.includes('employee-dashboard')) {\r\n        return true;  // Grant access if URL matches manager or employee dashboard\r\n      } else {\r\n        // If the URL is not manager or employee dashboard, redirect to login\r\n        this.router.navigate(['/login']);\r\n        return false;\r\n      }\r\n    } else if (role === 'employee') {\r\n      // Employee can only access employee-dashboard\r\n      if (url.includes('employee-dashboard')) {\r\n        return true;\r\n      } else {\r\n        this.router.navigate(['/login']);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // If none of the conditions matched, redirect to login\r\n    console.log('Access denied. Redirecting to login.');\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "FakeBackendInterceptor",
            "id": "injectable-FakeBackendInterceptor-8e189c692c4998cfcf640ef7a02c54cc4eef37ccb658d03fc3526fd89f2064c3941ff6b6555baca49fe93db2cc0406efab1b5058d06437441f16d43e59df629d",
            "file": "src/app/fake-backend.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (request.url.endsWith('/api/register') && request.method === 'POST') {\r\n      const body = { message: 'Registration successful' };\r\n      return of(new HttpResponse({ status: 200, body })).pipe(delay(500));\r\n    }\r\n    return next.handle(request);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AdminDashboardComponent",
            "id": "component-AdminDashboardComponent-7d048a448f248baa898804812d336146f8fc749dc63d2e44bcf6b67feb86365dd14760c1649956aee762b7b894344db6cb28ae1a4932c8277da1d0065d3e4e75",
            "file": "src/app/admin-dashboard/admin-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-dashboard",
            "styleUrls": [
                "./admin-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeItem",
                    "defaultValue": "'dashboard'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isNavbarCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isToggled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "setActiveItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleNavbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-admin-dashboard',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule],\r\n  templateUrl: './admin-dashboard.component.html',\r\n  styleUrls: ['./admin-dashboard.component.scss']\r\n})\r\nexport class AdminDashboardComponent {\r\n  isToggled: boolean = false; // Track the state of the sidebar\r\n  isNavbarCollapsed: boolean = true; // Track the state of the navbar collapse\r\n  activeItem: string = 'dashboard'; // Track the active navbar item (default to 'dashboard')\r\n  \r\n  constructor(private router: Router) {} // Inject Router\r\n\r\n  // Toggle the sidebar's visibility\r\n  toggleSidebar(): void {\r\n    this.isToggled = !this.isToggled; // Toggle the sidebar state\r\n  }\r\n\r\n  // Toggle the navbar's collapsed state\r\n  toggleNavbar(): void {\r\n    this.isNavbarCollapsed = !this.isNavbarCollapsed; // Toggle the navbar state\r\n  }\r\n\r\n  // Set the active item based on the selected navbar or sidebar link\r\n  setActiveItem(item: string): void {\r\n    this.activeItem = item; // Update the active item to the selected one\r\n    console.log(`Active item set to: ${item}`); // Debugging\r\n  }\r\n\r\n  // Method to sign out the user\r\n  signOut(): void {\r\n    this.router.navigate(['/login']); // Navigate to login\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body {\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f8f9fa; // Light background for contrast\r\n  color: #343a40; // Dark text color for readability\r\n}\r\n\r\n.container-fluid {\r\n  padding: 0; // Remove default padding\r\n}\r\n\r\n.bg-dark {\r\n  background-color: #343a40 !important; // Dark background for sidebar and navbar\r\n  color: #ffffff; // Ensure text in dark backgrounds remains visible\r\n}\r\n\r\n.navbar {\r\n  border-bottom: 2px solid #17a2b8; // Bottom border for navbar\r\n}\r\n\r\n.navbar-dark {\r\n  .navbar-nav {\r\n    .nav-link {\r\n      color: #fff; // White text for navbar links\r\n\r\n      &.active {\r\n        color: #f8f9fa; // Active link color\r\n      }\r\n\r\n      transition: color 0.3s;\r\n      \r\n      &:hover {\r\n        color: #17a2b8; // Hover color for nav links\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-menu-dark {\r\n  background-color: #343a40; // Dark background for dropdown\r\n  border: none; // Remove border for cleaner look\r\n}\r\n\r\n.main-content {\r\n  padding: 20px; // Padding for main content\r\n  background-color: #ffffff; // White background for content readability\r\n  border-radius: 8px; // Rounded corners for content container\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); // Subtle shadow for depth\r\n}\r\n\r\n.col,\r\n.col-auto {\r\n  padding: 0; // Remove padding around columns\r\n}\r\n\r\n.nav-item {\r\n  .badge {\r\n    font-size: 0.8rem; // Smaller badge font size\r\n    margin-left: 5px; // Add some spacing\r\n  }\r\n}\r\n\r\n.sidebar {\r\n  width: 100%; // Ensure full width for sidebar\r\n  padding-top: 10px; // Add spacing at the top\r\n\r\n  .nav-link {\r\n    color: #adb5bd; // Muted color for sidebar links\r\n\r\n    &:hover {\r\n      color: #f8f9fa; // Bright color on hover\r\n    }\r\n\r\n    &.active {\r\n      background-color: #17a2b8; // Highlight active link\r\n      color: #ffffff; // White text for active link\r\n      border-radius: 4px; // Rounded corners for active link\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-menu {\r\n  .dropdown-item {\r\n    &:hover {\r\n      background-color: #17a2b8; // Hover effect for dropdown items\r\n      color: #ffffff; // White text on hover\r\n    }\r\n  }\r\n\r\n  .dropdown-divider {\r\n    border-top: 1px solid #adb5bd; // Lighter divider color\r\n  }\r\n}\r\n",
                    "styleUrl": "./admin-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container-fluid\">\r\n  <div class=\"row flex-nowrap\">\r\n    <!-- Sidebar -->\r\n    <div class=\"col-auto col-md-3 col-xl-2 px-sm-2 px-0 bg-dark\">\r\n      <div class=\"d-flex flex-column align-items-center align-items-sm-start px-3 pt-2 text-white min-vh-100\">\r\n        <a href=\"/\" class=\"d-flex align-items-center pb-3 mb-md-0 me-md-auto text-white text-decoration-none\">\r\n          <span class=\"fs-5 d-none d-sm-inline\">Admin Menu</span>\r\n        </a>\r\n        <ul class=\"nav nav-pills flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start\" id=\"menu\">\r\n          <li class=\"nav-item\">\r\n            <a href=\"#\" class=\"nav-link align-middle px-0\" (click)=\"setActiveItem('userManagement')\">\r\n              <i class=\"fs-4 bi-people-fill\"></i> <span class=\"ms-1 d-none d-sm-inline\">User Management</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link px-0 align-middle\" (click)=\"setActiveItem('reports')\">\r\n              <i class=\"fs-4 bi-file-earmark-bar-graph\"></i> <span class=\"ms-1 d-none d-sm-inline\">Reports</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link px-0 align-middle\" (click)=\"setActiveItem('systemLogs')\">\r\n              <i class=\"fs-4 bi-clipboard-data\"></i> <span class=\"ms-1 d-none d-sm-inline\">System Logs</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link px-0 align-middle\" (click)=\"setActiveItem('supportRequests')\">\r\n              <i class=\"fs-4 bi-envelope-fill\"></i> <span class=\"ms-1 d-none d-sm-inline\">Support Requests</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <hr>\r\n        <div class=\"dropdown pb-4\">\r\n          <a href=\"#\" class=\"d-flex align-items-center text-white text-decoration-none dropdown-toggle\" id=\"dropdownUser1\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n            <img src=\"assets/admin3.png\" alt=\"User\" width=\"30\" height=\"30\" class=\"rounded-circle\">\r\n            <span class=\"d-none d-sm-inline mx-1\">Admin</span>\r\n          </a>\r\n          <ul class=\"dropdown-menu dropdown-menu-dark text-small shadow\">\r\n            <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('profile'); $event.preventDefault();\">Profile</a></li>\r\n            <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('adminSettings'); $event.preventDefault();\">Admin Settings</a></li>\r\n            <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('generalSettings'); $event.preventDefault();\">General Settings</a></li>\r\n            <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('userPermissions'); $event.preventDefault();\">User Permissions</a></li>\r\n            <li>\r\n              <hr class=\"dropdown-divider\">\r\n            </li>\r\n            <li><a class=\"dropdown-item\" href=\"#\" (click)=\"signOut()\">Sign out</a></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"col py-0\">\r\n      <!-- Navbar -->\r\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark mb-0\">\r\n        <div class=\"container-fluid\">\r\n          <a class=\"navbar-brand\" href=\"#\">Admin Dashboard</a>\r\n          <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <i class=\"fas fa-bars text-light\"></i>\r\n          </button>\r\n\r\n          <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto d-flex flex-row mt-3 mt-lg-0\">\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link active\" aria-current=\"page\" href=\"#!\" (click)=\"setActiveItem('dashboard')\">\r\n                  <div>\r\n                    <img src=\"assets/dashboard.png\" alt=\"Dashboard\" width=\"24\" height=\"24\" class=\"mb-1\" />\r\n                    Dashboard\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('userManagement')\">\r\n                  <div>\r\n                    <img src=\"assets/team.png\" alt=\"Users\" width=\"24\" height=\"24\" class=\"mb-1\" />\r\n                    Users\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('reports')\">\r\n                  <div>\r\n                    <img src=\"assets/seo-report.png\" alt=\"Reports\" width=\"24\" height=\"24\" class=\"mb-1\" />\r\n                    Reports\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <!-- Add Settings button with dropdown -->\r\n              <li class=\"nav-item dropdown text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownSettings\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  <img src=\"assets/cogwheel.png\" alt=\"Settings\" width=\"24\" height=\"24\" class=\"mb-1\" /> <!-- Path to the cogwheel image -->\r\n                  Settings\r\n                </a>\r\n                <ul class=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"navbarDropdownSettings\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('adminSettings'); $event.preventDefault();\">Admin Settings</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('generalSettings'); $event.preventDefault();\">General Settings</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('userPermissions'); $event.preventDefault();\">User Permissions</a></li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n\r\n            <ul class=\"navbar-nav ms-auto d-flex flex-row mt-3 mt-lg-0\">\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('notifications')\">\r\n                  <div>\r\n                    <i class=\"fas fa-bell fa-lg mb-1\"></i>\r\n                    <span class=\"badge rounded-pill badge-notification bg-info\">3</span>\r\n                  </div>\r\n                  Notifications\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('messages')\">\r\n                  <div>\r\n                    <i class=\"fas fa-envelope fa-lg mb-1\"></i>\r\n                    <span class=\"badge rounded-pill badge-notification bg-primary\">2</span>\r\n                  </div>\r\n                  Messages\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <!-- Page Content Placeholder -->\r\n      <div class=\"container\">\r\n        <h1 class=\"mt-4\">Welcome to the Admin Dashboard</h1>\r\n        <p>Manage users, settings, and view reports here.</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b53bc5adb39de7ba99e57653e8c0fc9c7b3bb84073300a66e18b35700a9454dc8ab228a0c3aa5f4798a9dc80bf7c2def4e1ae1cbbad9383e18256b1d8497a91c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'HRMS Dashboard'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router'; // Import RouterModule here\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule]  // Make sure RouterModule is in the imports array\r\n})\r\nexport class AppComponent {\r\n  title = 'HRMS Dashboard';\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  // Handle logout and clear the localStorage\r\n  onLogout() {\r\n    localStorage.removeItem('role');  // Clear role from localStorage\r\n    this.router.navigate(['/login']);  // Redirect to login page after logout\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "\r\n\r\n\r\n\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "EmployeeDashboardComponent",
            "id": "component-EmployeeDashboardComponent-5e3b3492491853f2a7a3ece1575ad2bcd6520fcdc707eca01613591b816fa0f56bb21dfcabea4dbe8cb4c13c9f63934b1fadb00661b41244f3b746648ffc46c0",
            "file": "src/app/employee-dashboard/employee-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employee-dashboard",
            "styleUrls": [
                "./employee-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./employee-dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeItem",
                    "defaultValue": "'home'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isNavbarCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isSettingsDropdownOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isToggled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "setActiveItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleNavbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSettingsDropdown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-employee-dashboard',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule],\r\n  templateUrl: './employee-dashboard.component.html',\r\n  styleUrls: ['./employee-dashboard.component.scss']\r\n})\r\nexport class EmployeeDashboardComponent {\r\n  isToggled: boolean = false; // Sidebar state\r\n  isNavbarCollapsed: boolean = true; // Navbar collapse state\r\n  activeItem: string = 'home'; // Active item for navigation\r\n  isSettingsDropdownOpen: boolean = false; // Dropdown state for settings\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  // Toggle the sidebar visibility\r\n  toggleSidebar(): void {\r\n    this.isToggled = !this.isToggled;\r\n  }\r\n\r\n  // Toggle navbar collapse state\r\n  toggleNavbar(): void {\r\n    this.isNavbarCollapsed = !this.isNavbarCollapsed;\r\n  }\r\n\r\n  // Update active item\r\n  setActiveItem(item: string): void {\r\n    this.activeItem = item;\r\n    console.log(`Active item set to: ${item}`);\r\n  }\r\n\r\n  // Open or close settings dropdown\r\n  toggleSettingsDropdown(event: MouseEvent): void {\r\n    event.stopPropagation(); // Prevent event from bubbling up and triggering signOut\r\n    this.isSettingsDropdownOpen = !this.isSettingsDropdownOpen;\r\n  }\r\n\r\n  // Sign out method\r\n  signOut(): void {\r\n    this.router.navigate(['/login']); // Navigate to login\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body {\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f8f9fa; // Light background for contrast\r\n  color: #343a40; // Dark text color for readability\r\n}\r\n\r\n.container-fluid {\r\n  padding: 0; // Remove default padding\r\n}\r\n\r\n.bg-dark {\r\n  background-color: #343a40 !important; // Dark background for sidebar and navbar\r\n  color: #ffffff; // Ensure text in dark backgrounds remains visible\r\n}\r\n\r\n.navbar {\r\n  border-bottom: 2px solid #17a2b8; // Bottom border for navbar\r\n\r\n  .navbar-dark {\r\n    .navbar-nav {\r\n      .nav-link {\r\n        color: #fff; // White text for navbar links\r\n\r\n        &.active {\r\n          color: #f8f9fa; // Active link color\r\n        }\r\n\r\n        transition: color 0.3s;\r\n\r\n        &:hover {\r\n          color: #17a2b8; // Hover color for nav links\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-menu-dark {\r\n  background-color: #343a40; // Dark background for dropdown\r\n  border: none; // Remove border for cleaner look\r\n}\r\n\r\n.main-content {\r\n  padding: 20px; // Padding for main content\r\n  background-color: #ffffff; // White background for content readability\r\n  border-radius: 8px; // Rounded corners for content container\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); // Subtle shadow for depth\r\n}\r\n\r\n.col,\r\n.col-auto {\r\n  padding: 0; // Remove padding around columns\r\n}\r\n\r\n.nav-item {\r\n  .badge {\r\n    font-size: 0.8rem; // Smaller badge font size\r\n    margin-left: 5px; // Add some spacing\r\n  }\r\n}\r\n\r\n.sidebar {\r\n  width: 100%; // Ensure full width for sidebar\r\n  padding-top: 10px; // Add spacing at the top\r\n\r\n  .nav-link {\r\n    color: #adb5bd; // Muted color for sidebar links\r\n\r\n    &:hover {\r\n      color: #f8f9fa; // Bright color on hover\r\n    }\r\n\r\n    &.active {\r\n      background-color: #17a2b8; // Highlight active link\r\n      color: #ffffff; // White text for active link\r\n      border-radius: 4px; // Rounded corners for active link\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-menu {\r\n  .dropdown-item {\r\n    &:hover {\r\n      background-color: #17a2b8; // Hover effect for dropdown items\r\n      color: #ffffff; // White text on hover\r\n    }\r\n  }\r\n\r\n  .dropdown-divider {\r\n    border-top: 1px solid #adb5bd; // Lighter divider color\r\n  }\r\n}\r\n",
                    "styleUrl": "./employee-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container-fluid\">\r\n  <div class=\"row flex-nowrap\">\r\n    <!-- Sidebar -->\r\n    <div class=\"col-auto col-md-3 col-xl-2 px-sm-2 px-0 bg-dark\">\r\n      <div class=\"d-flex flex-column align-items-center align-items-sm-start px-3 pt-2 text-white min-vh-100\">\r\n        <a href=\"/\" class=\"d-flex align-items-center pb-3 mb-md-0 me-md-auto text-white text-decoration-none\">\r\n          <span class=\"fs-5 d-none d-sm-inline\">Employee Menu</span>\r\n        </a>\r\n        <ul class=\"nav nav-pills flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start\" id=\"menu\">\r\n          <li class=\"nav-item\">\r\n            <a href=\"#\" class=\"nav-link align-middle d-flex align-items-center px-0\" (click)=\"setActiveItem('profile')\">\r\n              <i class=\"fs-4 bi-person-circle me-2\"></i> <span class=\"ms-1\">Profile</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link d-flex align-items-center px-0\" (click)=\"setActiveItem('attendance')\">\r\n              <i class=\"fs-4 bi-calendar-check me-2\"></i> <span class=\"ms-1\">Attendance</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link d-flex align-items-center px-0\" (click)=\"setActiveItem('tasks')\">\r\n              <i class=\"fs-4 bi-briefcase me-2\"></i> <span class=\"ms-1\">Tasks</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link d-flex align-items-center px-0\" (click)=\"setActiveItem('performance')\">\r\n              <i class=\"fs-4 bi-bar-chart-line me-2\"></i> <span class=\"ms-1\">Performance</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link d-flex align-items-center px-0\" (click)=\"setActiveItem('payroll')\">\r\n              <i class=\"fs-4 bi-wallet2 me-2\"></i> <span class=\"ms-1\">Payroll</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <hr>\r\n        <div class=\"dropdown pb-4\">\r\n          <a href=\"#\" class=\"d-flex align-items-center text-white text-decoration-none dropdown-toggle\" id=\"dropdownUser1\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n            <img src=\"assets/employe.png\" alt=\"User\" width=\"30\" height=\"30\" class=\"rounded-circle\">\r\n            <span class=\"d-none d-sm-inline mx-1\">Employee</span>\r\n          </a>\r\n          <ul class=\"dropdown-menu dropdown-menu-dark text-small shadow\">\r\n            <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('profile')\">Profile</a></li>\r\n            <li>\r\n              <hr class=\"dropdown-divider\">\r\n            </li>\r\n            <li><a class=\"dropdown-item\" href=\"#\" (click)=\"signOut()\">Sign out</a></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"col py-0\">\r\n      <!-- Navbar -->\r\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark mb-0\">\r\n        <div class=\"container-fluid\">\r\n          <a class=\"navbar-brand\" href=\"#\">Employee Dashboard</a>\r\n          <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <i class=\"fas fa-bars text-light\"></i>\r\n          </button>\r\n\r\n          <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <!-- Main navigation items -->\r\n            <ul class=\"navbar-nav me-auto d-flex flex-row mt-3 mt-lg-0\">\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link active\" aria-current=\"page\" href=\"#!\" (click)=\"setActiveItem('home')\">\r\n                  <div>\r\n                    <img src=\"assets/home (1).png\" alt=\"Home\" width=\"24\" height=\"24\" class=\"mb-1\" />\r\n                    Home\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('myTasks')\">\r\n                  <div>\r\n                    <img src=\"assets/done.png\" alt=\"My Tasks\" width=\"24\" height=\"24\" class=\"mb-1\" />\r\n                    My Tasks\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('schedule')\">\r\n                  <div>\r\n                    <img src=\"assets/schedule.png\" alt=\"Schedule\" width=\"24\" height=\"24\" class=\"mb-1\" />\r\n                    Schedule\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item dropdown text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownSettings\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  <img src=\"assets/cogwheel.png\" alt=\"Settings\" width=\"24\" height=\"24\" class=\"mb-1\" /> <!-- Path to the cogwheel image -->\r\n                  Settings\r\n                </a>\r\n                <!-- Settings dropdown menu -->\r\n                <ul class=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"navbarDropdownSettings\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('settingsProfile')\">Profile Settings</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('settingsPassword')\">Change Password</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('settingsPrivacy')\">Privacy Settings</a></li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n\r\n            <!-- Right-side navigation items -->\r\n            <ul class=\"navbar-nav ms-auto d-flex flex-row mt-3 mt-lg-0\">\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('notifications')\">\r\n                  <i class=\"fas fa-bell fa-lg mb-1\"></i>\r\n                  <span class=\"badge rounded-pill badge-notification bg-info\">3</span>\r\n                  Notifications\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('messages')\">\r\n                  <i class=\"fas fa-envelope fa-lg mb-1\"></i>\r\n                  <span class=\"badge rounded-pill badge-notification bg-primary\">2</span>\r\n                  Messages\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <!-- Page Content Placeholder -->\r\n      <div class=\"container\">\r\n        <h1 class=\"mt-4\">Welcome to the Employee Dashboard</h1>\r\n        <p>View your tasks, track your attendance, and manage your personal performance metrics here.</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "LanguageDropdownComponent",
            "id": "component-LanguageDropdownComponent-3079ecac44c52aa84e18f965317a6bac8ff6dd6b18bea52f77ba7f90e5ac8ea02f3d6213d9eff1228d176b17e6e4f39d3092bd270b0ea6ba24a79bb39c7f2049",
            "file": "src/app/common/language-dropdown/language-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-language-dropdown",
            "styleUrls": [
                "./language-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./language-dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedLanguage",
                    "defaultValue": "'en'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedLanguageChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dropdownVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hoveredLanguage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "languages",
                    "defaultValue": "[\r\n    { value: 'en', label: 'English' },\r\n    { value: 'fr', label: 'French' },\r\n    { value: 'ar', label: 'Arabic' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getLanguageLabel",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLanguageChange",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHoveredLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-language-dropdown',\r\n  templateUrl: './language-dropdown.component.html',\r\n  styleUrls: ['./language-dropdown.component.scss'],\r\n})\r\nexport class LanguageDropdownComponent {\r\n  @Input() selectedLanguage: string = 'en'; // Default language\r\n  @Output() selectedLanguageChange = new EventEmitter<string>();\r\n\r\n  dropdownVisible: boolean = false;\r\n  hoveredLanguage: string | null = null; // To track the hovered language\r\n\r\n  // Language options\r\n  languages = [\r\n    { value: 'en', label: 'English' },\r\n    { value: 'fr', label: 'French' },\r\n    { value: 'ar', label: 'Arabic' },\r\n  ];\r\n\r\n  // Toggle the visibility of the dropdown\r\n  toggleDropdown(): void {\r\n    this.dropdownVisible = !this.dropdownVisible;\r\n  }\r\n\r\n  // Handle selection change\r\n  onLanguageChange(lang: string): void {\r\n    this.selectedLanguage = lang;\r\n    this.selectedLanguageChange.emit(lang);\r\n    this.dropdownVisible = false;  // Hide dropdown after selection\r\n  }\r\n\r\n  // Set the hovered language for styling\r\n  setHoveredLanguage(lang: string | null): void {\r\n    this.hoveredLanguage = lang;\r\n  }\r\n\r\n  // Get the language label by its code (added method)\r\n  getLanguageLabel(langCode: string): string {\r\n    const language = this.languages.find(lang => lang.value === langCode);\r\n    return language ? language.label : '';\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Styling for the language selector */\r\n.language-selector {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 650px;\r\n  display: flex;\r\n  align-items: center;\r\n  z-index: 10;\r\n  cursor: pointer;\r\n}\r\n\r\n/* Globe icon styling */\r\n.language-selector .globe-icon {\r\n  width: 18px;\r\n  height: 18px;\r\n  margin-right: 8px; /* Adds space between the globe icon and the language text */\r\n}\r\n\r\n/* Selected language text styling */\r\n.language-selector .selected-language {\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 26px;\r\n  color: #454545;\r\n  margin-right: 10px; /* Adds space between the language text and the arrow */\r\n  text-align: left;\r\n}\r\n\r\n/* Styling for the dropdown select */\r\n.language-dropdown {\r\n  width: 120px;\r\n  padding-right: 0;\r\n  border: none;\r\n  background: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#454545\" stroke-width=\"1.0\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"6 9 12 15 18 9\"></polyline></svg>') no-repeat;\r\n  background-position: calc(100% - 3px) 65%;\r\n  background-size: 20px 20px;\r\n  font-family: 'Archia', sans-serif;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  line-height: 26px;\r\n  gap: 10px;\r\n  text-align: left;\r\n  appearance: none;\r\n  color: #454545;\r\n  position: relative;\r\n  border-radius: 20px;\r\n  overflow: hidden;\r\n  filter: url(#goo);\r\n  /* Gooey effect */\r\n}\r\n\r\n.language-selector .globe-icon {\r\n  width: 18px;\r\n  height: 18px;\r\n  margin-right: -1px; /* Space between globe icon and text */\r\n}\r\n\r\n/* Dropdown options styled as a \"mine box\" */\r\n.language-dropdown option {\r\n  background: #FFFFFF;\r\n  color: #454545;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 8px;\r\n  margin: 4px 0;\r\n  box-shadow: 0px 2px 20px rgba(0, 0, 0, 0.1), 0px 8px 32px rgba(0, 0, 0, 0.04);\r\n  transition: background-color 0.3s ease, color 0.3s ease;\r\n}\r\n\r\n/* Hover effect for dropdown options */\r\n.language-dropdown option:hover {\r\n  background: #007bff;\r\n  color: #FFFFFF;\r\n  box-shadow: 0px 8px 32px rgba(0, 0, 0, 0.15), 0px 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n/* Custom arrow icon styling */\r\n.language-dropdown+.arrow-icon {\r\n  content: \"\";\r\n  width: 10px;\r\n  height: 10px;\r\n  border-bottom: 2px solid #000;\r\n  border-right: 2px solid #000;\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 5px; /* Adjust this value to move the arrow further to the right */\r\n  transform: rotate(45deg);\r\n  transform-origin: right;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n/* Rotate arrow when dropdown is open */\r\n.language-selector.open .arrow-icon {\r\n  transform: rotate(180deg); /* Rotate the arrow 180 degrees */\r\n}\r\n/* Hover effect for the dropdown itself */\r\n\r\n  .language-selector .arrow-icon {\r\n    position: absolute;\r\n    top: 50%;\r\n    right: -20px; /* Adjust spacing from the right */\r\n    transform: translateY(-50%); /* Center vertically */\r\n    width: 18px;\r\n    height: 18px;\r\n    transition: transform 0.3s ease;\r\n  }\r\n  \r\n\r\n.language-dropdown:hover {\r\n  filter: none;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\r\n  /* Soft shadow for hover effect */\r\n}\r\n\r\n/* Styling for the language selector container */\r\n\r\n  .language-selector {\r\n    \r\n      position: absolute;\r\n      top: 20px;\r\n      right: 650px;\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px; /* Space between globe icon and text */\r\n      z-index: 10;\r\n    }\r\n  \r\n\r\n\r\n/* Adjust spacing for the dropdown */\r\n.language-selector select {\r\n  margin-left: -35px;\r\n}\r\n.arrow-icon {\r\n  width: 18px; /* Set the width to match the original icon */\r\n  height: 18px; /* Set the height to match the original icon */\r\n  transition: transform 0.3s ease; /* Smooth rotation transition */\r\n}\r\n/* Globe icon styling */\r\n.globe-icon {\r\n  width: 18px;\r\n  height: 18px;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n/* Responsive adjustments for smaller screens */\r\n@media (max-width: 768px) {\r\n  .language-selector {\r\n    position: fixed;\r\n    top: 10px;\r\n    right: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px; /* Space between globe icon and text */\r\n    z-index: 10;\r\n  }\r\n\r\n  .language-dropdown {\r\n    width: 120px;\r\n    padding-right: 0;\r\n    border: none;\r\n    background: url('/assets/black-arrow.png') no-repeat;\r\n    background-position: calc(100% - 10px) 50%;\r\n    background-size: 16px 16px;\r\n  }\r\n\r\n  .language-dropdown {\r\n    border-radius: 20px;\r\n  }\r\n\r\n  .language-dropdown option {\r\n    background: white;\r\n    color: black;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n}\r\n\r\n/* Dropdown Menu Container Styling (Modified for Hug width, height, and positioning) */\r\n.language-dropdown-wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  position: absolute;\r\n  top: 8%;\r\n  /* Align dropdown directly below the selector */\r\n  left: 51.5%;\r\n  /* Center the dropdown */\r\n  transform: translateX(-50%);\r\n  /* Center the dropdown horizontally */\r\n  margin-top: 4px;\r\n  /* Tiny space between selector and dropdown */\r\n  width: 180px;\r\n  height: auto;\r\n  border: 0.1px #ddd; /* Light border around the dropdown */\r\n  background: #FFFFFF;\r\n  /* White background */\r\n  border-radius: 12px; /* Smooth rounded corners */\r\n  visibility: hidden; /* Hidden by default */\r\n  opacity: 0;\r\n  box-shadow: 0px 8px 24px rgba(0, 0, 0, 0.1); /* Light shadow */\r\n  border-radius: 8px;\r\n  /* Rounded corners */\r\n  z-index: 10;\r\n  /* Ensure dropdown is above other content */\r\n  opacity: 1;\r\n  gap: 0px;\r\n  display: block;\r\n  transition: opacity 0.3s ease, transform 0.3s ease;\r\n}\r\n\r\n.language-selector.open + .language-dropdown-wrapper {\r\n  opacity: 1;\r\n  visibility: visible;\r\n}\r\n\r\n/* Dropdown options styling with margin, padding, and shadows */\r\n.language-dropdown-wrapper .language-dropdown option {\r\n  background: #FFFFFF; /* White background for options */\r\n  color: #454545; /* Text color */\r\n  padding: 12px 16px; /* Padding for the options */\r\n  border: none; /* No border */\r\n  border-radius: 8px; /* Rounded corners for individual options */\r\n  margin: 4px 8px; /* Add slight spacing around options */\r\n  transition: background-color 0.3s ease, color 0.3s ease;\r\n  cursor: pointer;\r\n}\r\n\r\n.language-dropdown-wrapper .language-dropdown-option.selected {\r\n  background: #e0eaff; /* Light blue for active state */\r\n  color: #0a0a0a; /* Primary color for text */\r\n  font-weight: normal; /* Emphasize the selected option */\r\n}\r\n\r\n/* Show dropdown when visible */\r\n.language-selector.open + .language-dropdown-wrapper {\r\n  opacity: 1;\r\n  visibility: visible;\r\n}\r\n\r\n.language-dropdown-wrapper.open {\r\n  transform: translateX(-50%) translateY(10px); /* Slight downward animation */\r\n}\r\n\r\n/* Hover effect for dropdown options */\r\n.language-dropdown-wrapper .language-dropdown option:hover {\r\n  background: #007bff;\r\n  /* Blue background on hover */\r\n  color: #ffffff;\r\n  /* White text color on hover */\r\n  box-shadow: 0px 8px 32px rgba(0, 0, 0, 0.15), 0px 4px 20px rgba(0, 0, 0, 0.1);\r\n  /* Shadow on hover */\r\n}\r\n\r\n/* Dropdown visibility toggle */\r\n.language-dropdown-wrapper {\r\n  opacity: 1;\r\n  display: block;\r\n  z-index: 10;\r\n}\r\n\r\n/* Active option styling */\r\n.active-option {\r\n  background: #007bff;\r\n  color: #fff;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Add transition for smoother experience */\r\n.language-dropdown-option {\r\n  background: #FFFFFF; /* White background for options */\r\n  color: #000;\r\n  padding: 12px 16px; /* Padding for the options */\r\n  border: 0.1px #ddd; /* Light border for each option */\r\n  border-radius: 8px; /* Rounded corners for options */\r\n  margin: 4px 8px; /* Add slight spacing around options */\r\n  transition: background-color 0.3s ease, color 0.3s ease; /* Smooth transition */\r\n  cursor: pointer; /* Change cursor to pointer */\r\n}\r\n\r\n/* Hover effect remains intact */\r\n.language-dropdown-option:hover {\r\n  background-color: #f6f6f6;\r\n  color: rgb(5, 5, 5);\r\n}\r\n\r\n/* Style for selected language option */\r\n.language-dropdown-option.selected {\r\n  background-color: #080808;\r\n  color: #333;\r\n  font-weight: bold;\r\n}\r\n\r\n.language-dropdown-option.hovered-option {\r\n  background-color: #e5f1ff;\r\n  color: #060606;\r\n  box-shadow: 0px 8px 32px rgba(0, 0, 0, 0.15), 0px 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.language-selector:hover {\r\n  background-color: #f9f9f9;\r\n  border-color: #0f0f10;\r\n}\r\n\r\n.language-selector .arrow-icon {\r\n  position: absolute;\r\n  top: 50%;\r\n  right: -15px; /* Adjust spacing from the right */\r\n  transform: translateY(-50%); /* Center vertically */\r\n  width: 18px;\r\n  height: 18px;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.language-selector.open .arrow-icon {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .language-selector {\r\n    padding: 8px 16px;\r\n    font-size: 12px;\r\n  }\r\n\r\n  .language-dropdown-wrapper {\r\n    width: 140px;\r\n  }\r\n\r\n  .language-dropdown-option {\r\n    font-size: 12px;\r\n    padding: 8px 12px;\r\n  }\r\n}\r\n\r\n.language-selector .selected-language {\r\n  font-weight: bold;\r\n  /* Bold text for the selected language */\r\n  color: #333;\r\n}\r\n\r\n/* General font styles */\r\n.selected-language {\r\n  font-weight: normal; /* Default font weight */\r\n  font-size: 16px; /* Default font size */\r\n  color: #454545;\r\n  transition: font-weight 0.3s ease, font-size 0.3s ease; /* Smooth transition for font change */\r\n}\r\n\r\n.selected-language.selected {\r\n  font-weight: bold; /* Bold font when selected */\r\n  font-size: 18px; /* Larger font size when selected */\r\n}\r\n",
                    "styleUrl": "./language-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div \r\n  class=\"language-selector\" \r\n  (click)=\"toggleDropdown()\" \r\n  [ngClass]=\"{ open: dropdownVisible }\">\r\n  <img src=\"assets/globe.png\" alt=\"Globe Icon\" class=\"globe-icon\" />\r\n  <span \r\n    class=\"selected-language\" \r\n    [ngClass]=\"{ 'selected': selectedLanguage }\">\r\n    {{ getLanguageLabel(selectedLanguage) }}\r\n  </span>\r\n  <img src=\"assets/black-arrow.ico\" alt=\"Arrow Icon\" class=\"arrow-icon\" /> <!-- Replaced with image -->\r\n</div>\r\n\r\n<div \r\n  *ngIf=\"dropdownVisible\" \r\n  class=\"language-dropdown-wrapper\">\r\n  <div \r\n    *ngFor=\"let lang of languages\" \r\n    class=\"language-dropdown-option\"\r\n    [ngClass]=\"{\r\n      selected: lang.value === selectedLanguage\r\n    }\"\r\n    (click)=\"onLanguageChange(lang.value)\">\r\n    {{ lang.label }}\r\n  </div>\r\n</div>"
        },
        {
            "name": "LeftSideComponent",
            "id": "component-LeftSideComponent-1a8cb1192f55a52117f026edb4c92cd1639143c0064a1bdd290ae54d65c7e1acba9daeed5bebc71d2a4980e52abd98662cbae6f948823d1b8f890e9df1e7a57f",
            "file": "src/app/shared/left-side/left-side.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-left-side",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./left-side.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-left-side',\r\n  standalone: true, // This makes it a standalone component\r\n  imports: [],\r\n  templateUrl: './left-side.component.html',\r\n  styleUrl: './left-side.component.scss'\r\n})\r\nexport class LeftSideComponent {\r\n\r\n}\r\n",
            "styleUrl": "./left-side.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"position-relative w-99.95 h-99.95\">\r\n    <img src=\"assets/Frame 2244.png\" alt=\"Icon\" class=\"position-absolute\"\r\n      style=\"top: 60px; left: 40px; width: 270px; height: 150px;\">\r\n    <img src=\"assets/Group 2328.png\" alt=\"Image\" class=\"w-100 h-100 object-fit-cover\">\r\n  </div>\r\n  "
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-2d8b22a1cc034831918c8ebcbe58c10666b4ed6cf5606720c7920203e885e00b87b596e4c78322bfcb11e0d805bfaa495e70491697c83e8a6a00710c5959e152",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isChangePasswordFlow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isEmailFocused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isPasswordFocused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "loginData",
                    "defaultValue": "{\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '', // Add confirmPassword here\r\n    selectedLanguage: 'en',\r\n    confirmEmail: '' // Add confirmEmail if required\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "showConfirmPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showSuccessMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "clearMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "forgotPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveToResetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRegisterClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "passwordRequirements",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleConfirmPasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validatePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "LeftSideComponent",
                    "type": "component"
                },
                {
                    "name": "SharedModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { LeftSideComponent } from '../shared/left-side/left-side.component';\r\nimport { SharedModule } from '../shared.module';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, LeftSideComponent, SharedModule],\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n  loginData = {\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '', // Add confirmPassword here\r\n    selectedLanguage: 'en',\r\n    confirmEmail: '' // Add confirmEmail if required\r\n  };\r\n  message: string = '';\r\n  showSuccessMessage: boolean = false;\r\n  isChangePasswordFlow: boolean = false;\r\n  errorMessage: string = '';\r\n  showPassword: boolean = false;\r\n  showConfirmPassword: boolean = false; // Add showConfirmPassword\r\n  isEmailFocused = false;\r\n  isPasswordFocused = false;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  // Login method (existing)\r\n  login() {\r\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    const storedUser = users.find(\r\n      (user: any) =>\r\n        user.email === this.loginData.email &&\r\n        user.password === this.loginData.password\r\n    );\r\n\r\n    if (storedUser) {\r\n      localStorage.setItem('role', storedUser.role);\r\n      localStorage.setItem('isAuthenticated', 'true');\r\n      this.router.navigate([`/${storedUser.role}-dashboard`]);\r\n    } else {\r\n      this.message = 'Invalid email or password.';\r\n    }\r\n  }\r\n\r\n  // New method to handle password reset\r\n  moveToResetPassword() {\r\n    this.router.navigate(['/reset-password']);\r\n  }\r\n\r\n  forgotPassword() {\r\n    this.moveToResetPassword(); // Use the method above\r\n  }\r\n\r\n  onRegisterClick() {\r\n    this.router.navigate(['/register']);\r\n  }\r\n\r\n  clearMessage() {\r\n    this.message = '';\r\n  }\r\n\r\n  // Handle focus event\r\n  onFocus(event: FocusEvent) {\r\n    const target = event.target as HTMLInputElement;\r\n    if (target.id === 'typeEmailX') {\r\n      this.isEmailFocused = true;\r\n    } else if (target.id === 'typePasswordX') {\r\n      this.isPasswordFocused = true;\r\n    }\r\n  }\r\n\r\n  // Handle blur event\r\n  onBlur(event: FocusEvent) {\r\n    const target = event.target as HTMLInputElement;\r\n    if (target.id === 'typeEmailX') {\r\n      this.isEmailFocused = false;\r\n    } else if (target.id === 'typePasswordX') {\r\n      this.isPasswordFocused = false;\r\n    }\r\n  }\r\n\r\n  // Toggle password visibility\r\n  togglePasswordVisibility() {\r\n    this.showPassword = !this.showPassword;\r\n  }\r\n\r\n  // Toggle confirm password visibility\r\n  toggleConfirmPasswordVisibility() {\r\n    this.showConfirmPassword = !this.showConfirmPassword;\r\n  }\r\n\r\n  // Validate password\r\n  validatePassword() {\r\n    if (this.loginData.password.length < 6) {\r\n      this.errorMessage = 'Password must be at least 6 characters.';\r\n    } else {\r\n      this.errorMessage = '';\r\n    }\r\n  }\r\n\r\n  // You can add password requirements (for example)\r\n  passwordRequirements() {\r\n    return \"Password should be at least 6 characters, contain a number, and a special character.\";\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* SCSS File: login.component.scss */\r\n\r\n// Variables (optional, for reusability)\r\n$input-background-color: #f9f9f9;\r\n$input-border-color: #ccc;\r\n$primary-color: #FF8C00;\r\n$text-color: #121212;\r\n$error-color: #f04d1f;\r\n\r\n// Form and Input Styling\r\n.card-body {\r\n  padding: 4rem 2rem;\r\n}\r\n\r\nh2 {\r\n  margin-bottom: 10px !important;\r\n  color: $text-color !important;\r\n}\r\n\r\np {\r\n  margin-bottom: 20px !important;\r\n  color: #555 !important;\r\n}\r\n\r\n// Floating Label Styling\r\n.floating-label {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 12px;\r\n  font-size: 14px;\r\n  color: #888 !important;\r\n  transition: all 0.3s ease;\r\n  pointer-events: none;\r\n  transform: translateY(-50%);\r\n}\r\n\r\n.form-control.form-control-lg {\r\n  background-color: $input-background-color !important;\r\n  border: 1px solid $input-border-color !important;\r\n  color: $text-color !important;\r\n  font-family: 'Roundo', sans-serif !important;\r\n  padding: 0px 12px !important;\r\n  font-size: 18px !important;\r\n  border-radius: 8px !important;\r\n  width: 100% !important;\r\n  text-align: left !important;\r\n  height: 50px !important;\r\n  line-height: 50px !important;\r\n  display: block;\r\n  box-sizing: border-box;\r\n  transition: padding-top 0.3s ease;\r\n\r\n  &.input-focused {\r\n    border-color: $primary-color !important;\r\n    box-shadow: 0 0 0 0.2rem rgba(255, 140, 0, 0.25) !important;\r\n  }\r\n\r\n  &:focus + .floating-label,\r\n  &:not(:placeholder-shown) + .floating-label {\r\n    top: -10px;\r\n    font-size: 12px;\r\n    color: $primary-color !important;\r\n  }\r\n}\r\n\r\n// Buttons\r\n.next-button {\r\n  background-color: $primary-color !important;\r\n  color: white !important;\r\n  font-family: 'Roundo', sans-serif !important;\r\n  font-size: 16px !important;\r\n  font-weight: bold !important;\r\n  height: 48px !important;\r\n  border: none !important;\r\n  border-radius: 8px !important;\r\n  cursor: pointer !important;\r\n  transition: all 0.3s ease !important;\r\n\r\n  &:hover {\r\n    background-color: darken($primary-color, 10%) !important;\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #f5f5f5 !important;\r\n    color: #aaa !important;\r\n    border: 1px solid $input-border-color !important;\r\n  }\r\n}\r\n\r\n.btn-link {\r\n  color: $error-color !important;\r\n  font-family: 'Roundo', sans-serif !important;\r\n  font-size: 14px !important;\r\n\r\n  &:hover {\r\n    text-decoration: none !important;\r\n    color: $error-color !important;\r\n  }\r\n}\r\n\r\n// Responsive Adjustments\r\n@media (max-width: 768px) {\r\n  .col-md-7 {\r\n    padding-left: 0 !important;\r\n    padding-top: 20px !important;\r\n  }\r\n\r\n  .col-md-5 {\r\n    margin-bottom: 20px !important;\r\n  }\r\n}\r\n\r\n// Validation Error Message Styling\r\n.text-danger {\r\n  font-size: 12px;\r\n  margin-top: 5px;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<section class=\"vh-100 d-flex align-items-center\" style=\"background-color: #ffffff; color: #121212;\">\r\n  <div class=\"row w-100 m-0\">\r\n    <!-- Login Form on the Left -->\r\n    <div class=\"col-12 col-md-7 col-lg-7 col-xl-8 p-0 d-flex justify-content-start align-items-center\">\r\n      <div class=\"col-12 col-md-9 col-lg-9 p-4 text-start\">\r\n        <!-- Language Dropdown -->\r\n        <div class=\"mb-4\">\r\n          <app-language-dropdown [(selectedLanguage)]=\"loginData.selectedLanguage\"></app-language-dropdown>\r\n        </div>\r\n\r\n        <h2 class=\"fw-bold mb-2 text-uppercase\">Welcome Back!</h2>\r\n        <p>\r\n          Don’t have an account?\r\n          <button type=\"button\" (click)=\"onRegisterClick()\" class=\"btn btn-link\">Create Account</button>\r\n        </p>\r\n\r\n        <form (ngSubmit)=\"login()\" #loginForm=\"ngForm\">\r\n          <!-- Email Field -->\r\n          <div class=\"form-floating mb-3\">\r\n            <input\r\n              type=\"email\"\r\n              id=\"typeEmailX\"\r\n              class=\"form-control form-control-lg\"\r\n              [(ngModel)]=\"loginData.email\"\r\n              name=\"email\"\r\n              #email=\"ngModel\"\r\n              required\r\n              placeholder=\"Your Email\"\r\n              (focus)=\"onFocus($event)\"\r\n              (blur)=\"onBlur($event)\"\r\n              [ngClass]=\"{'input-focused': isEmailFocused}\" />\r\n            <label for=\"typeEmailX\" class=\"floating-label\"> Email</label>\r\n            <div *ngIf=\"email.invalid && email.touched\" class=\"text-danger\">\r\n              Valid email is required.\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Password Field -->\r\n          <div class=\"form-floating mb-3\">\r\n            <input\r\n              type=\"password\"\r\n              id=\"typePasswordX\"\r\n              class=\"form-control form-control-lg\"\r\n              [(ngModel)]=\"loginData.password\"\r\n              name=\"password\"\r\n              #password=\"ngModel\"\r\n              required\r\n              placeholder=\"Password\"\r\n              (focus)=\"onFocus($event)\"\r\n              (blur)=\"onBlur($event)\"\r\n              [ngClass]=\"{'input-focused': isPasswordFocused}\" />\r\n            <label for=\"typePasswordX\" class=\"floating-label\">Password</label>\r\n            <div *ngIf=\"password.invalid && password.touched\" class=\"text-danger\">\r\n              Password is required.\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Login Button -->\r\n          <button\r\n            type=\"submit\"\r\n            class=\"btn next-button\"\r\n            [disabled]=\"!loginForm.valid\"\r\n          >\r\n            Login\r\n          </button>\r\n\r\n          <!-- Forgot Password Link -->\r\n          <p class=\"small\">\r\n            <button\r\n              type=\"button\"\r\n              (click)=\"forgotPassword()\"\r\n              class=\"btn btn-link\"\r\n            >\r\n              Forgot Password?\r\n            </button>\r\n          </p>\r\n\r\n          <p *ngIf=\"message\" class=\"text-danger mt-3\">{{ message }}</p>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Right Side: LeftSideComponent -->\r\n    <div class=\"col-12 col-md-5 col-lg-5 col-xl-4 p-0\">\r\n      <app-left-side></app-left-side>\r\n    </div>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "ManagerDashboardComponent",
            "id": "component-ManagerDashboardComponent-f7b896a2acdbb6d7e8a0d668d69aa73eb81226901be6f562dfdc71a9b69a6b08a688b2c5cfbd0379bbd9005cd8c885bff7b111c1564cb222e5ca57ab8673b7ea",
            "file": "src/app/manager-dashboard/manager-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-manager-dashboard",
            "styleUrls": [
                "./manager-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./manager-dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeItem",
                    "defaultValue": "'home'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isNavbarCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isSettingsDropdownOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isToggled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "setActiveItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleNavbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSettingsDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AppComponent } from '../app.component';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-manager-dashboard',\r\n  standalone: true,\r\n  imports: [CommonModule,RouterModule ],\r\n  templateUrl: './manager-dashboard.component.html',\r\n  styleUrls: ['./manager-dashboard.component.scss']\r\n})\r\nexport class ManagerDashboardComponent {\r\n  isToggled: boolean = false; // Sidebar state\r\n  isNavbarCollapsed: boolean = true; // Navbar collapse state\r\n  activeItem: string = 'home'; // Active navigation item\r\n  isSettingsDropdownOpen: boolean = false; // Track the state of settings dropdown\r\n\r\n  constructor(private router: Router)  {}\r\n\r\n  // Toggle the sidebar visibility\r\n  toggleSidebar(): void {\r\n    this.isToggled = !this.isToggled;\r\n  }\r\n\r\n  // Toggle navbar collapse state\r\n  toggleNavbar(): void {\r\n    this.isNavbarCollapsed = !this.isNavbarCollapsed;\r\n  }\r\n\r\n  // Update the active navigation item\r\n  setActiveItem(item: string): void {\r\n    this.activeItem = item;\r\n  }\r\n\r\n  // Toggle the settings dropdown visibility\r\n  toggleSettingsDropdown(): void {\r\n    this.isSettingsDropdownOpen = !this.isSettingsDropdownOpen;\r\n  }\r\n\r\n  // Sign out and navigate back to the login screen\r\n  signOut(): void {\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body {\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f8f9fa; // Light background for contrast\r\n  color: #343a40; // Dark text color for readability\r\n}\r\n\r\n.container-fluid {\r\n  padding: 0; // Remove default padding\r\n}\r\n\r\n.bg-dark {\r\n  background-color: #343a40 !important; // Dark background for sidebar and navbar\r\n  color: #ffffff; // Ensure text in dark backgrounds remains visible\r\n}\r\n\r\n.navbar {\r\n  border-bottom: 2px solid #17a2b8; // Bottom border for navbar\r\n\r\n  &.navbar-dark {\r\n    .navbar-nav {\r\n      .nav-link {\r\n        color: #fff; // White text for navbar links\r\n\r\n        &.active {\r\n          color: #f8f9fa; // Active link color\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.nav-link {\r\n  transition: color 0.3s;\r\n\r\n  &:hover {\r\n    color: #17a2b8; // Hover color for nav links\r\n  }\r\n}\r\n\r\n.dropdown-menu-dark {\r\n  background-color: #343a40; // Dark background for dropdown\r\n  border: none; // Remove border for cleaner look\r\n}\r\n\r\n.main-content {\r\n  padding: 20px; // Padding for main content\r\n  background-color: #ffffff; // White background for content readability\r\n  border-radius: 8px; // Rounded corners for content container\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); // Subtle shadow for depth\r\n}\r\n\r\n.col,\r\n.col-auto {\r\n  padding: 0; // Remove padding around columns\r\n}\r\n\r\n.nav-item {\r\n  .badge {\r\n    font-size: 0.8rem; // Smaller badge font size\r\n    margin-left: 5px; // Add some spacing\r\n  }\r\n}\r\n\r\n.sidebar {\r\n  width: 100%; // Ensure full width for sidebar\r\n  padding-top: 10px; // Add spacing at the top\r\n\r\n  .nav-link {\r\n    color: #adb5bd; // Muted color for sidebar links\r\n\r\n    &:hover {\r\n      color: #f8f9fa; // Bright color on hover\r\n    }\r\n\r\n    &.active {\r\n      background-color: #17a2b8; // Highlight active link\r\n      color: #ffffff; // White text for active link\r\n      border-radius: 4px; // Rounded corners for active link\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-menu {\r\n  .dropdown-item {\r\n    &:hover {\r\n      background-color: #17a2b8; // Hover effect for dropdown items\r\n      color: #ffffff; // White text on hover\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-divider {\r\n  border-top: 1px solid #adb5bd; // Lighter divider color\r\n}\r\n",
                    "styleUrl": "./manager-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container-fluid\">\r\n  <div class=\"row flex-nowrap\">\r\n    <!-- Sidebar -->\r\n    <div class=\"col-auto col-md-3 col-xl-2 px-sm-2 px-0 bg-dark\">\r\n      <div class=\"d-flex flex-column align-items-center align-items-sm-start px-3 pt-2 text-white min-vh-100\">\r\n        <a href=\"/\" class=\"d-flex align-items-center pb-3 mb-md-0 me-md-auto text-white text-decoration-none\">\r\n          <span class=\"fs-5 d-none d-sm-inline\">Manager Menu</span>\r\n        </a>\r\n        <ul class=\"nav nav-pills flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start\" id=\"menu\">\r\n          <li class=\"nav-item\">\r\n            <a href=\"#\" class=\"nav-link align-middle px-0\" (click)=\"setActiveItem('teamOverview')\">\r\n              <span class=\"ms-1 d-none d-sm-inline\">Team Overview</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link px-0 align-middle\" (click)=\"setActiveItem('attendanceManagement')\">\r\n              <i class=\"fs-4 bi-calendar-check\"></i> <span class=\"ms-1 d-none d-sm-inline\">Attendance</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link px-0 align-middle\" (click)=\"setActiveItem('taskAssignment')\">\r\n              <i class=\"fs-4 bi-briefcase\"></i> <span class=\"ms-1 d-none d-sm-inline\">Task Assignment</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link px-0 align-middle\" (click)=\"setActiveItem('performanceReview')\">\r\n              <i class=\"fs-4 bi-bar-chart-line\"></i> <span class=\"ms-1 d-none d-sm-inline\">Performance</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" class=\"nav-link px-0 align-middle\" (click)=\"setActiveItem('requests')\">\r\n              <i class=\"fs-4 bi-envelope\"></i> <span class=\"ms-1 d-none d-sm-inline\">Requests</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <hr>\r\n        <div class=\"dropdown pb-4\">\r\n          <a href=\"#\" class=\"d-flex align-items-center text-white text-decoration-none dropdown-toggle\" id=\"dropdownUser1\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n            <img src=\"assets/manager1.png\" alt=\"User\" width=\"30\" height=\"30\" class=\"rounded-circle\">\r\n            <span class=\"d-none d-sm-inline mx-1\">Manager</span>\r\n          </a>\r\n          <ul class=\"dropdown-menu dropdown-menu-dark text-small shadow\">\r\n            <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('profile')\">Profile</a></li>\r\n            <li><hr class=\"dropdown-divider\"></li>\r\n           \r\n            <li><a class=\"dropdown-item\" href=\"#\" (click)=\"signOut()\">Sign out</a></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"col py-0\">\r\n      <!-- Navbar -->\r\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark mb-0\">\r\n        <div class=\"container-fluid\">\r\n          <a class=\"navbar-brand\" href=\"#\">Manager Dashboard</a>\r\n          <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <i class=\"fas fa-bars text-light\"></i>\r\n          </button>\r\n\r\n          <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto d-flex flex-row mt-3 mt-lg-0\">\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link active\" aria-current=\"page\" href=\"#!\" (click)=\"setActiveItem('home')\">\r\n                  <div>\r\n                    <img src=\"assets/home (1).png\" alt=\"Home\" width=\"24\" height=\"24\" class=\"mb-1\" />\r\n                    Home\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('teamOverview')\">\r\n                  <div>\r\n                    <img src=\"assets/united.png\" alt=\"Team\" width=\"24\" height=\"24\" class=\"mb-1\" />\r\n                    Team\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('reports')\">\r\n                  <div>\r\n                    <img src=\"assets/seo-report.png\" alt=\"Reports\" width=\"24\" height=\"24\" class=\"mb-1\" />\r\n                    Reports\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item dropdown text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownSettings\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  <img src=\"assets/cogwheel.png\" alt=\"Settings\" width=\"24\" height=\"24\" class=\"mb-1\" /> <!-- Path to the cogwheel image -->\r\n                  Settings\r\n                </a>\r\n                <!-- Settings dropdown menu -->\r\n                <ul class=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"navbarDropdownSettings\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('Change Password')\">Change Password</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('settingsProfile')\">Profile Settings</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"setActiveItem('settingsPrivacy')\">Privacy Settings</a></li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n\r\n            <!-- Right-side navigation items -->\r\n            <ul class=\"navbar-nav ms-auto d-flex flex-row mt-3 mt-lg-0\">\r\n              <li class=\"nav-item text-center mx-2 mx-lg-1\">\r\n                <a class=\"nav-link\" href=\"#!\" (click)=\"setActiveItem('notifications')\">\r\n                  <div>\r\n                    <i class=\"fas fa-bell fa-lg mb-1\"></i>\r\n                    <span class=\"badge rounded-pill badge-notification bg-info\">5</span>\r\n                  </div>\r\n                  Notifications\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <!-- Main content section when reset password is not shown -->\r\n      <div class=\"container mt-4\" >\r\n        <h1>Welcome to the Manager Dashboard</h1>\r\n        <p>Oversee team tasks, manage attendance, assign projects, and review performance metrics for better team management and productivity.</p>\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-b05d86819f4f61376641c6735fdefdfc1f97e6046d5d85ce6b6087947eefa33d8bdf8aea6b60a945ac5ba43c322c0719eb3f8e5ff7254a234a37f6a6e3a05a24",
            "file": "src/app/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './not-found.component.html',\r\n  styleUrl:  './not-found.component.scss'\r\n})\r\nexport class NotFoundComponent {\r\n\r\n}\r\n",
            "styleUrl": "./not-found.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container text-center my-5\">\r\n    <h1 class=\"display-4 text-white\">404 - Access Denied</h1>\r\n    <p class=\"lead zoom-area text-white\">You do not have access to this page.</p>\r\n    <section class=\"error-container\">\r\n      <span class=\"four\"><span class=\"screen-reader-text\">4</span></span>\r\n      <span class=\"zero\"><span class=\"screen-reader-text\">0</span></span>\r\n      <span class=\"four\"><span class=\"screen-reader-text\">4</span></span>\r\n    </section>\r\n    <div class=\"link-container mt-4\">\r\n      <a href=\"/\" class=\"more-link\">Back to Log In Page</a>\r\n    </div>\r\n  </div>\r\n  "
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-fa6d6e38881141a780ca6e2d0692fbf6f797af8f04eac89b319b5be8cf91d6893193d808f764e8b091f4f8e9c671f6e984121b929f9fbcafbf9871b74791ffdb",
            "file": "src/app/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emailExists",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "hasLowercase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "hasNumber",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hasUppercase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "passwordLength",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "registerData",
                    "defaultValue": "{\r\n    name: '',\r\n    email: '',\r\n    company: '',\r\n    role: '',\r\n    employees: '',\r\n    industry: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    otherRole: '',\r\n    selectedLanguage: 'en'  // Default language\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "registrationSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPasswordStrength",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isCreateAccountValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEmailRegistered",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNextStepValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEmailChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRoleChange",
                    "args": [
                        {
                            "name": "selectedRole",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedRole",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "SharedModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { Router } from '@angular/router';\r\nimport { SharedModule } from '../shared.module';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, RouterModule, SharedModule],\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent {\r\n  step: number = 1; // Tracks the current step of the registration process\r\n  registrationSuccess: boolean = false; // Flag to indicate successful registration\r\n  message: string = ''; // To store success or error messages\r\n  errorMessage: string = ''; // To store error messages\r\n  emailExists: boolean = false; // Flag to track if the email is already registered\r\n  passwordLength: boolean = false; // Flag to track password length requirement\r\n  hasLowercase: boolean = false; // Flag for lowercase character requirement\r\n  hasUppercase: boolean = false; // Flag for uppercase character requirement\r\n  hasNumber: boolean = false; // Flag for number requirement\r\n\r\n  // Register data with selectedLanguage\r\n  registerData = {\r\n    name: '',\r\n    email: '',\r\n    company: '',\r\n    role: '',\r\n    employees: '',\r\n    industry: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    otherRole: '',\r\n    selectedLanguage: 'en'  // Default language\r\n  };\r\n\r\n  constructor(private router: Router) { }\r\n\r\n    // Update to use RoleSelectorComponent data\r\n    onRoleChange(selectedRole: string): void {\r\n      this.registerData.role = selectedRole;\r\n    }\r\n\r\n  // Proceed to the next step of the registration process\r\n  nextStep() {\r\n    this.errorMessage = ''; // Reset error message at each step\r\n\r\n    // Validate Step 1 fields (Name, Email, Company, Role)\r\n    if (this.step === 1) {\r\n      if (this.registerData.name && this.registerData.email && this.registerData.company && this.registerData.role) {\r\n        this.step++;\r\n      } else {\r\n        this.errorMessage = 'Please fill all fields in Step 1.';\r\n      }\r\n    }\r\n\r\n    // Validate Step 2 fields (Employees, Industry)\r\n    else if (this.step === 2) {\r\n      if (this.registerData.employees && this.registerData.industry) {\r\n        this.step++;\r\n      } else {\r\n        this.errorMessage = 'Please fill all fields in Step 2.';\r\n      }\r\n    }\r\n\r\n    // Validate Step 3 fields (Password, Confirm Password, Email)\r\n    else if (this.step === 3) {\r\n      if (this.registerData.password !== this.registerData.confirmPassword) {\r\n        this.errorMessage = 'Passwords do not match. Please try again.';\r\n      } else if (this.isEmailRegistered(this.registerData.email)) {\r\n        this.errorMessage = 'This email is already registered. Please use a different email.';\r\n      } else {\r\n        this.register(); // Save to local storage when the last step is valid\r\n      }\r\n    }\r\n  }\r\n\r\n  // Go to the previous step of the registration process\r\n  previousStep() {\r\n    if (this.step > 1) {\r\n      this.step--;\r\n    }\r\n  }\r\n\r\n  // Register the user and save to local storage\r\n  register(form?: NgForm) {\r\n    console.log(\"Registration process started.\");\r\n\r\n    // Check if passwords match before proceeding\r\n    if (this.registerData.password !== this.registerData.confirmPassword) {\r\n      this.errorMessage = 'Passwords do not match. Please try again.';\r\n      return; // Stop the registration process if passwords do not match\r\n    }\r\n\r\n    // Check if the email is already registered\r\n    if (this.isEmailRegistered(this.registerData.email)) {\r\n      this.errorMessage = 'This email is already registered. Please use a different email.';\r\n      return; // Stop the registration process if the email is already registered\r\n    }\r\n\r\n    // If validation passes, proceed to save the data\r\n    const existingUsers = JSON.parse(localStorage.getItem('users') || '[]');\r\n\r\n    // Add new user to the list\r\n    existingUsers.push(this.registerData);\r\n    localStorage.setItem('users', JSON.stringify(existingUsers));\r\n\r\n    console.log(\"Registration successful. Navigating to login.\");\r\n    this.registrationSuccess = true; // Set success flag to show the success message\r\n    this.message = 'Registration successful! Your information has been saved.'; // Set success message\r\n\r\n    // Clear the form after successful registration\r\n    this.registerData = {\r\n      name: '',\r\n      email: '',\r\n      company: '',\r\n      role: '',\r\n      employees: '',\r\n      industry: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      otherRole: '',\r\n      selectedLanguage: 'en', // Default language\r\n    };\r\n\r\n    // Reset the form state\r\n    if (form) {\r\n      form.reset();\r\n    }\r\n\r\n    // Redirect to login page after registration\r\n    setTimeout(() => {\r\n      this.router.navigate(['/login']);\r\n    }, 3000); // Delay navigation to allow user to see the success message\r\n  }\r\n\r\n  // Check if the email is already registered\r\n  isEmailRegistered(email: string): boolean {\r\n    const existingUsers = JSON.parse(localStorage.getItem('users') || '[]');\r\n    // Check if the email matches any user's email\r\n    return existingUsers.some((user: { email: string }) => user.email === email);\r\n  }\r\n\r\n  // Check email as the user types\r\n  onEmailChange() {\r\n    this.emailExists = this.isEmailRegistered(this.registerData.email);\r\n  }\r\n\r\n  // Check password requirements as the user types\r\n  checkPasswordStrength() {\r\n    this.passwordLength = this.registerData.password.length >= 8;\r\n    this.hasLowercase = /[a-z]/.test(this.registerData.password);\r\n    this.hasUppercase = /[A-Z]/.test(this.registerData.password);\r\n    this.hasNumber = /\\d/.test(this.registerData.password);\r\n  }\r\n\r\n  // Getter for all password requirements\r\n  get allRequirementsFulfilled(): boolean {\r\n    return this.passwordLength && this.hasLowercase && this.hasUppercase && this.hasNumber;\r\n  }\r\n\r\n// Validate \"Next\" button state\r\nisNextStepValid(): boolean {\r\n  if (this.step === 1) {\r\n    // Ensure that all required fields are filled and email is not already registered\r\n    return (\r\n      this.registerData.name !== '' &&\r\n      this.registerData.email !== '' &&\r\n      this.registerData.company !== '' &&\r\n      this.registerData.role !== '' &&\r\n      !this.emailExists\r\n    );\r\n  } else if (this.step === 2) {\r\n    // Ensure that employees and industry are filled\r\n    return this.registerData.employees !== '' && this.registerData.industry !== '';\r\n  } else if (this.step === 3) {\r\n    // Ensure passwords match and all password requirements are fulfilled\r\n    return (\r\n      this.registerData.password === this.registerData.confirmPassword &&\r\n      this.allRequirementsFulfilled &&\r\n      !this.emailExists\r\n    );\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\n  // Validate \"Create Account\" button state\r\n  isCreateAccountValid(): boolean {\r\n    return this.registerData.password === this.registerData.confirmPassword && this.allRequirementsFulfilled && !this.emailExists;\r\n  }\r\n\r\n  // Navigate to login page\r\n  goToLogin() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Variables for Colors and Fonts */\r\n$btn-color: #F04D1F;\r\n$btn-hover-color: #D8431B;\r\n$btn-disabled-color: #D8431B;\r\n$btn-disabled-opacity: 0.7;\r\n$input-focus-color: #2929F5;\r\n$progress-bar-color: #4caf50;\r\n$radio-checked-bg: #66b3ff;\r\n$radio-checked-border: white;\r\n$radio-focus-outline: #2929F5;\r\n\r\n$font-family-main: 'Roundo', sans-serif;\r\n$font-family-alt: 'Archia', sans-serif;\r\n\r\n/* General Button Styling */\r\n.btn {\r\n  font-family: $font-family-main;\r\n  border: none;\r\n  border-radius: 8px;\r\n  transition: all 0.3s ease;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n\r\n\r\n/* Success Message Styling */\r\n.success-message {\r\n  background-color: #4caf50; /* Green background for success */\r\n  color: white; /* White text */\r\n  font-size: 16px; /* Font size */\r\n  font-weight: 600; /* Bold text */\r\n  padding: 12px 20px; /* Padding */\r\n  border-radius: 8px; /* Rounded corners */\r\n  width: auto; /* Allow the message to be as wide as necessary */\r\n  max-width: 400px; /* Limit max width for the message */\r\n  margin: 10px auto; /* Center the message */\r\n  text-align: center; /* Center the text */\r\n  display: block; /* Make it block-level for proper spacing */\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Light shadow for depth */\r\n  transition: opacity 0.3s ease; /* Smooth transition for fading out */\r\n}\r\n\r\n/* Show the success message when triggered */\r\n.success-message.show {\r\n  opacity: 1; /* Ensure the message is visible */\r\n}\r\n\r\n/* Hide the success message */\r\n.success-message.hide {\r\n  opacity: 0; /* Hide the message */\r\n  pointer-events: none; /* Disable interaction */\r\n}\r\n\r\n/* Success message hover effect */\r\n.success-message:hover {\r\n  background-color: #45a049; /* Darker green on hover */\r\n}\r\n\r\n  &:hover:not(.btn-disabled) {\r\n    background-color: $btn-hover-color;\r\n  }\r\n\r\n  &.btn-disabled {\r\n    background-color: $btn-disabled-color !important;\r\n    color: white;\r\n    cursor: not-allowed;\r\n    opacity: $btn-disabled-opacity;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 4px rgba(0, 0, 0, 0.2);\r\n  }\r\n\r\n  &.btn-orange {\r\n    background-color: $btn-color;\r\n    color: white;\r\n\r\n    &:hover {\r\n      background-color: $btn-hover-color;\r\n    }\r\n  }\r\n}\r\n\r\n/* Next Button Specific Styling */\r\n.next-button {\r\n  background-color: $btn-color;\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  padding: 12px 20px;\r\n  width: 120px;\r\n  height: 48px;\r\n  line-height: 48px;\r\n}\r\n\r\n/* Create Account Button Specific Styling */\r\n.create-account-button {\r\n  background-color: $btn-color;\r\n  color: white;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  padding: 0 20px;\r\n  width: 120px;\r\n  height: 48px;\r\n  line-height: 1;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* Hover Effect for Buttons */\r\n.btn:hover:not(.btn-disabled) {\r\n  background-color: $btn-hover-color;\r\n}\r\n\r\n/* Disabled Button State */\r\n.btn-disabled {\r\n  background-color: $btn-disabled-color !important;\r\n  color: white;\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n/* Focus State for Buttons */\r\n.btn:focus {\r\n  outline: none;\r\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n/* Dynamic Button State */\r\n.btn-orange {\r\n  background-color: $btn-color;\r\n  color: white;\r\n}\r\n\r\n.btn-orange:hover {\r\n  background-color: $btn-hover-color;\r\n}\r\n\r\n/* Apply Figma Font Globally */\r\nbody, .card-body {\r\n  font-family: $font-family-main;\r\n}\r\n\r\nlabel {\r\n  font-family: $font-family-main;\r\n  font-size: 14px;\r\n}\r\n\r\n.step-text {\r\n  font-family: $font-family-main;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n\r\n/* Progress Bar */\r\n.progress {\r\n  height: 12px;\r\n  background-color: #f0f0f0;\r\n\r\n  .progress-bar {\r\n    background-color: $progress-bar-color;\r\n  }\r\n}\r\n\r\n/* Radio Buttons */\r\n.radio-wrapper {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.radio-container {\r\n  position: relative;\r\n  padding: 10px 20px;\r\n  background-color: white;\r\n  border: 2px solid #444444;\r\n  border-radius: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  overflow: hidden;\r\n  margin-bottom: 10px;\r\n  transition: all 0.3s ease;\r\n\r\n  &:focus-within {\r\n    outline: 3px solid $radio-focus-outline;\r\n  }\r\n\r\n  &:before,\r\n  &:after {\r\n    content: '';\r\n    position: absolute;\r\n    width: 30px;\r\n    height: 15px;\r\n    background-color: white;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n  }\r\n\r\n  &:before {\r\n    top: -7px;\r\n    border-radius: 0 0 30px 30px;\r\n  }\r\n\r\n  &:after {\r\n    bottom: -7px;\r\n    border-radius: 30px 30px 0 0;\r\n  }\r\n\r\n  input[type=\"radio\"] {\r\n    background-color: white;\r\n    border: 2px solid black;\r\n    border-radius: 50%;\r\n    width: 15px;\r\n    height: 15px;\r\n    appearance: none;\r\n    cursor: pointer;\r\n    transition: all 0.3s ease;\r\n\r\n    &:checked {\r\n      background-color: $radio-checked-bg;\r\n      border: 2px solid $radio-checked-border;\r\n    }\r\n  }\r\n\r\n  label {\r\n    font-family: $font-family-main;\r\n    color: grey;\r\n    font-size: 16px;\r\n  }\r\n\r\n  input[type=\"radio\"]:checked + label {\r\n    color: grey;\r\n  }\r\n}\r\n\r\n/* Floating Labels */\r\n.floating-label {\r\n  position: absolute;\r\n  top: -8px;\r\n  left: -2px;\r\n  color: #6D6D6D;\r\n  font-family: $font-family-alt;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  line-height: 22px;\r\n  transition: all 0.2s ease;\r\n  pointer-events: none;\r\n  z-index: 1;\r\n}\r\n\r\n/* Input Styling */\r\n.input-container {\r\n  position: relative;\r\n  border: 1px solid #B0B0B0;\r\n  border-radius: 8px 0 0 0;\r\n  padding-top: 25px;\r\n  margin-bottom: 1rem;\r\n  background-color: #ffffff;\r\n  width: 559px;\r\n  height: 66px;\r\n}\r\n\r\n.input-box {\r\n  background-color: #FFFFFF;\r\n  color: #171717;\r\n  border: none;\r\n  width: 100%;\r\n  padding: 12px;\r\n  font-family: 'Inter', sans-serif;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n  line-height: 24px;\r\n  text-align: left;\r\n  border-radius: 4px;\r\n  transition: border 0.3s ease;\r\n\r\n  &:focus {\r\n    border: 1.5px solid $input-focus-color;\r\n    outline: none;\r\n  }\r\n\r\n  &:focus ~ .floating-label,\r\n  &:not(:placeholder-shown) ~ .floating-label {\r\n    top: 3px;\r\n    left: 8px;\r\n    font-size: 0.7rem;\r\n    color: #000000;\r\n    background-color: #ffffff;\r\n    padding: 0 4px;\r\n  }\r\n}\r\n\r\n/* Password Requirements */\r\n.password-requirements {\r\n  margin-top: 1rem;\r\n\r\n  .requirements-text {\r\n    margin-bottom: 0.5rem;\r\n    color: black;\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n    font-family: $font-family-alt;\r\n    line-height: 24px;\r\n    text-align: left;\r\n  }\r\n\r\n  .requirements-list {\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    .left-requirements,\r\n    .right-requirements {\r\n      list-style-type: none;\r\n      padding-left: 0;\r\n\r\n      li {\r\n        color: gray;\r\n        margin-bottom: 0.5rem;\r\n        font-size: 16px;\r\n        font-family: $font-family-alt;\r\n        font-weight: 500;\r\n        line-height: 24px;\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        &::before {\r\n          content: '•';\r\n          color: black;\r\n          margin-right: 8px;\r\n        }\r\n\r\n        &.fulfilled {\r\n          color: #198632;\r\n          font-weight: bold;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* Header Styling for Step Titles */\r\n.header-step {\r\n  font-family: $font-family-main;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #333;\r\n  text-align: left; /* Align headers to the left */\r\n  margin-left: -3px; /* Move header further to the left */\r\n  padding-left: 0; /* Remove any left padding */\r\n  margin-bottom: 20px;\r\n  width: 100%; /* Ensure full width for proper alignment */\r\n}\r\n\r\n/* Back Button Styling */\r\n.back-button {\r\n  font-family: $font-family-main;\r\n  font-size: 16px;\r\n  color: $btn-color;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  margin-bottom: 15px;\r\n  text-decoration: none;\r\n  background: none;\r\n  border: none;\r\n  padding-left: 0; /* Align with header */\r\n  margin-left: 0;\r\n\r\n  &:hover {\r\n    color: $btn-hover-color;\r\n  }\r\n\r\n  i {\r\n    margin-right: 5px;\r\n  }\r\n}\r\n\r\n/* Back to Login Button */\r\n.back-to-login {\r\n  display: block;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  font-family: $font-family-main;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: $btn-color;\r\n  cursor: pointer;\r\n  transition: color 0.3s ease;\r\n\r\n  &:hover {\r\n    color: $btn-hover-color;\r\n  }\r\n}\r\n\r\n/* Responsive Styles */\r\n@media (max-width: 768px) {\r\n  .input-container {\r\n    width: 100%;\r\n  }\r\n\r\n  .input-box {\r\n    font-size: 14px;\r\n    padding: 10px;\r\n  }\r\n\r\n  .next-button,\r\n  .create-account-button {\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n  }\r\n\r\n  .header-step {\r\n    font-size: 20px;\r\n    padding-left: 15px; /* Adjust padding for smaller screens */\r\n  }\r\n}\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "allRequirementsFulfilled": {
                    "name": "allRequirementsFulfilled",
                    "getSignature": {
                        "name": "allRequirementsFulfilled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 161
                    }
                }
            },
            "templateData": "<link rel=\"stylesheet\"\r\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css\">\r\n<link href=\"https://fonts.googleapis.com/css2?family=Roundo&display=swap\" rel=\"stylesheet\">\r\n<link\r\n  href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Poppins:wght@400;500;600;700&display=swap\"\r\n  rel=\"stylesheet\">\r\n<link\r\n  href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&family=Nunito:wght@300;400;600;700&display=swap\"\r\n  rel=\"stylesheet\">\r\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400&display=swap\" rel=\"stylesheet\">\r\n\r\n\r\n<section class=\"vh-100 d-flex align-items-center\" style=\"background-color: #ffffff; color: #ffffff;\">\r\n  <div class=\"row w-100 m-0\">\r\n    <!-- Registration Form (80%) -->\r\n    <div class=\"col-12 col-md-8 col-lg-8 col-xl-8 p-0\">\r\n      <div class=\"row h-100 m-0\">\r\n        <!-- Form Section (75% of the 70%) -->\r\n        <div class=\"col-12 col-md-9 col-lg-9 p-4 text-start\">\r\n\r\n          <!-- Language Dropdown Component -->\r\n          <div *ngIf=\"step === 1 || step === 2 || step === 3\" class=\"mb-4\">\r\n\r\n            <app-language-dropdown [(selectedLanguage)]=\"registerData.selectedLanguage\"></app-language-dropdown>\r\n          </div>\r\n\r\n\r\n          <!-- Stepper Section -->\r\n          <div class=\"mb-4\">\r\n            <div class=\"d-flex justify-content-between mb-3\">\r\n              <!-- Step Number in White -->\r\n              <span class=\"step-text\" style=\"color: black; font-size: 16px;\">{{ step }} of 3</span>\r\n            </div>\r\n            <div class=\"progress\"\r\n              style=\"height: 10px; margin-bottom: 20px; background-color: #F0F0F8; border-radius: 5px;\">\r\n              <!-- Progress Bar with Darker Grey Background and Slightly Darker Blue Fill -->\r\n              <div class=\"progress-bar\" role=\"progressbar\" [style.width]=\"(step / 3) * 100 + '%'\" aria-valuenow=\"step\"\r\n                aria-valuemin=\"0\" aria-valuemax=\"3\" style=\"background-color: #5462FF; border-radius: 5px;\">\r\n              </div>\r\n            </div>\r\n\r\n<!-- Header for Step 1 -->\r\n<div *ngIf=\"step === 1\" class=\"mb-4\" style=\"margin-top: 60px;\">\r\n  <h2 class=\"header-step\">Setup Your Company Account</h2>\r\n</div>\r\n\r\n<!-- Step 2 Header -->\r\n<div *ngIf=\"step === 2\" class=\"mb-4\" style=\"margin-top: 60px;\">\r\n  <button type=\"button\" class=\"btn btn-link p-0 mb-3 back-button\" (click)=\"previousStep()\">\r\n    <i class=\"bi bi-arrow-left\" style=\"margin-right: 5px;\"></i> Back\r\n  </button>\r\n  <h2 class=\"header-step\">Hey, Now We Need To Know More About Your Company!</h2>\r\n</div>\r\n\r\n<!-- Step 3 Header -->\r\n<div *ngIf=\"step === 3\" class=\"mb-4\" style=\"margin-top: 60px;\">\r\n  <button type=\"button\" class=\"btn btn-link p-0 mb-3 back-button\" (click)=\"previousStep()\">\r\n    <i class=\"bi bi-arrow-left\" style=\"margin-right: 5px;\"></i> Back\r\n  </button>\r\n  <h2 class=\"header-step\">Now The Last Step, Create A Password To Your Account</h2>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <!-- Back to Login Button -->\r\n            <div *ngIf=\"step === 1\" class=\"d-flex align-items-center mb-2 back-to-login\" style=\"margin-top: -10px;\">\r\n              <p class=\"mb-0 me-2\">Already have an account?</p>\r\n              <button type=\"button\" class=\"btn btn-link p-0\" (click)=\"goToLogin()\">Login</button>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            <!-- Success message just above the \"Create Account\" button -->\r\n            <div *ngIf=\"registrationSuccess\" class=\"success-text\">\r\n              Registration successful! Your information has been saved.\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n          </div>\r\n\r\n          <!-- Step 1 -->\r\n          <div *ngIf=\"step === 1\">\r\n            <form (ngSubmit)=\"register()\" #registrationForm=\"ngForm\" class=\"registration-form\">\r\n              <div class=\"form-floating mb-4\">\r\n                <input type=\"text\" id=\"name\" class=\"form-control form-control-lg text-dark\"\r\n                  [(ngModel)]=\"registerData.name\" name=\"name\" #name=\"ngModel\" required placeholder=\"Your Name\"\r\n                  style=\"font-family: 'Roundo', sans-serif;\" />\r\n                <label for=\"name\" class=\"floating-label\">Full Name</label>\r\n                <div *ngIf=\"name.invalid && name.touched && !registrationSuccess\" class=\"text-danger\">\r\n                  Name is required.\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-floating mb-4\">\r\n                <input type=\"email\" id=\"email\" class=\"form-control form-control-lg text-dark\"\r\n                  [(ngModel)]=\"registerData.email\" name=\"email\" #email=\"ngModel\" required placeholder=\"Your Email\"\r\n                  style=\"font-family: 'Roundo', sans-serif;\" (ngModelChange)=\"onEmailChange()\" />\r\n                <label for=\"email\" class=\"floating-label\">Your Email</label>\r\n                <div *ngIf=\"email.invalid && email.touched && !registrationSuccess\" class=\"text-danger\">\r\n                  Valid email is required.\r\n                </div>\r\n                <div *ngIf=\"emailExists && !registrationSuccess\" class=\"text-danger\">\r\n                  This email is already registered. Please use a different email.\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-floating mb-4\">\r\n                <input type=\"text\" id=\"company\" class=\"form-control form-control-lg text-dark\"\r\n                  [(ngModel)]=\"registerData.company\" name=\"company\" #company=\"ngModel\" required\r\n                  placeholder=\"Company Name\" style=\"font-family: 'Roundo', sans-serif;\" />\r\n                <label for=\"company\" class=\"floating-label\">Company Name</label>\r\n                <div *ngIf=\"company.invalid && company.touched && !registrationSuccess\" class=\"text-danger\">\r\n                  Company name is required.\r\n                </div>\r\n              </div>\r\n<!-- RegisterComponent HTML -->\r\n<app-role-dropdown \r\n  [(selectedRole)]=\"registerData.role\" \r\n  (selectedRoleChange)=\"onRoleChange($event)\">\r\n</app-role-dropdown>\r\n\r\n<div *ngIf=\"registerData.role === 'other'\" class=\"form-floating mb-3\">\r\n  <input type=\"text\" id=\"otherRole\" class=\"form-control form-control-lg bg-da text-dark\"\r\n    [(ngModel)]=\"registerData.otherRole\" name=\"otherRole\" required placeholder=\"Specify Role\"\r\n    style=\"font-family: 'Roundo', sans-serif;\" />\r\n  <label for=\"otherRole\" class=\"floating-label\">Write Your Role</label>\r\n  <div *ngIf=\"registerData.otherRole && registerData.otherRole.length < 3\" class=\"text-danger\">\r\n    Please specify a valid role (at least 3 characters).\r\n  </div>\r\n</div>\r\n\r\n\r\n              <!-- Next Button -->\r\n              <!-- Next Button -->\r\n              <button *ngIf=\"step < 3\" class=\"btn next-button\" [disabled]=\"!isNextStepValid()\" (click)=\"nextStep()\">\r\n                Next\r\n              </button>\r\n            </form>\r\n          </div>\r\n\r\n          <!-- Step 2 -->\r\n          <div *ngIf=\"step === 2\">\r\n            <form #registrationForm=\"ngForm\" (ngSubmit)=\"register(registrationForm)\">\r\n\r\n\r\n              <!-- Add the sentence above the radio buttons -->\r\n              <div class=\"form-group mb-4\">\r\n                <label class=\"text-black mb-2\" for=\"employeesSize\" style=\"font-family: 'Roundo', sans-serif;\">\r\n                  What is your company size?\r\n                </label>\r\n              </div>\r\n\r\n\r\n              <div class=\"radio-wrapper\">\r\n                <div class=\"radio-container\">\r\n                  <label class=\"radio-inline\">\r\n                    <input type=\"radio\" name=\"employees\" [(ngModel)]=\"registerData.employees\" value=\"1-10\" required\r\n                      #employees=\"ngModel\">\r\n                    1-9\r\n                  </label>\r\n                </div>\r\n                <div class=\"radio-container\">\r\n                  <label class=\"radio-inline\">\r\n                    <input type=\"radio\" name=\"employees\" [(ngModel)]=\"registerData.employees\" value=\"11-50\" required\r\n                      #employees=\"ngModel\">\r\n                    11-49\r\n                  </label>\r\n                </div>\r\n                <div class=\"radio-container\">\r\n                  <label class=\"radio-inline\">\r\n                    <input type=\"radio\" name=\"employees\" [(ngModel)]=\"registerData.employees\" value=\"51-200\" required\r\n                      #employees=\"ngModel\">\r\n                    50-99\r\n                  </label>\r\n                </div>\r\n                <div class=\"radio-container\">\r\n                  <label class=\"radio-inline\">\r\n                    <input type=\"radio\" name=\"employees\" [(ngModel)]=\"registerData.employees\" value=\"100-299\" required\r\n                      #employees=\"ngModel\">\r\n                    100-299\r\n                  </label>\r\n                </div>\r\n                <div class=\"radio-container\">\r\n                  <label class=\"radio-inline\">\r\n                    <input type=\"radio\" name=\"employees\" [(ngModel)]=\"registerData.employees\" value=\"300+\" required\r\n                      #employees=\"ngModel\">\r\n                    300+\r\n                  </label>\r\n                </div>\r\n              </div>\r\n\r\n              <div *ngIf=\"employees.invalid && employees.touched && !registerData.employees\" class=\"text-danger\">\r\n                Please select the number of employees.\r\n              </div>\r\n\r\n              <!-- Industry Field -->\r\n              <div class=\"form-floating mb-4\">\r\n                <input type=\"text\" class=\"form-control form-control-lg text-dark\" id=\"industry\"\r\n                  [(ngModel)]=\"registerData.industry\" name=\"industry\" required placeholder=\"Industry\"\r\n                  #industry=\"ngModel\" style=\"font-family: 'Roundo', sans-serif;\" />\r\n                <label for=\"industry\" class=\"floating-label\">Industry</label>\r\n                <div *ngIf=\"industry.invalid && industry.touched && !registerData.industry\" class=\"text-danger\">\r\n                  Industry is required.\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Next Button -->\r\n              <button type=\"button\" class=\"btn next-button\" (click)=\"nextStep()\" [disabled]=\"!isNextStepValid()\"\r\n                [ngClass]=\"{\r\n    'btn-orange': isNextStepValid(),\r\n    'btn-disabled': !isNextStepValid()\r\n  }\">\r\n                Next\r\n              </button>\r\n            </form>\r\n\r\n          </div>\r\n\r\n          <!-- Step 3 -->\r\n          <div *ngIf=\"step === 3\">\r\n            <form (ngSubmit)=\"register()\" #registrationForm=\"ngForm\">\r\n              <!-- Password Field -->\r\n              <div class=\"form-floating mb-3\">\r\n                <input type=\"password\" id=\"password\" class=\"form-control form-control-lg text-dark\"\r\n                  [(ngModel)]=\"registerData.password\" name=\"password\" #password=\"ngModel\" required\r\n                  placeholder=\"Password\" style=\"font-family: 'Roundo', sans-serif;\" (input)=\"checkPasswordStrength()\" />\r\n                <label for=\"password\" class=\"floating-label\">Password</label>\r\n                <div *ngIf=\"password.invalid && password.touched && !registrationSuccess\" class=\"text-danger\">\r\n                  Password is required.\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Confirm Password Field -->\r\n              <div class=\"form-floating mb-3\" [ngClass]=\"{\r\n       'border-danger': registerData.password !== registerData.confirmPassword && confirmPassword.touched,\r\n       'border-success': registerData.password === registerData.confirmPassword && confirmPassword.touched\r\n     }\">\r\n                <input type=\"password\" id=\"confirmPassword\" class=\"form-control form-control-lg text-dark\"\r\n                  [(ngModel)]=\"registerData.confirmPassword\" name=\"confirmPassword\" #confirmPassword=\"ngModel\" required\r\n                  placeholder=\"Confirm Password\" style=\"font-family: 'Roundo', sans-serif;\" />\r\n                <label for=\"confirmPassword\" class=\"floating-label\">Confirm Password</label>\r\n                <div *ngIf=\"confirmPassword.invalid && confirmPassword.touched && !registrationSuccess\"\r\n                  class=\"text-danger\">\r\n                  Confirm password is required.\r\n                </div>\r\n                <div *ngIf=\"registerData.password !== registerData.confirmPassword && confirmPassword.touched\"\r\n                  class=\"text-danger\">\r\n                  Passwords do not match.\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <!-- Password Requirements -->\r\n              <div class=\"password-requirements\">\r\n                <div class=\"requirements-text\">Your password must include:</div>\r\n                <div class=\"requirements-list\">\r\n                  <!-- Left Bullet Points -->\r\n                  <ul class=\"left-requirements\">\r\n                    <li [ngClass]=\"{ 'fulfilled': passwordLength }\">At least 8 characters</li>\r\n                    <li [ngClass]=\"{ 'fulfilled': hasLowercase }\">Lowercase characters</li>\r\n                  </ul>\r\n                  <!-- Right Bullet Points -->\r\n                  <ul class=\"right-requirements\">\r\n                    <li [ngClass]=\"{ 'fulfilled': hasNumber }\">Numbers</li>\r\n                    <li [ngClass]=\"{ 'fulfilled': hasUppercase }\">Uppercase characters</li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Create Account Button -->\r\n              <button type=\"submit\" class=\"btn create-account-button\" (click)=\"register()\"\r\n                [disabled]=\"!isCreateAccountValid()\" [ngClass]=\"{\r\n    'btn-orange': isCreateAccountValid(),\r\n    'btn-disabled': !isCreateAccountValid()\r\n  }\">\r\n                Create Account\r\n              </button>\r\n            </form>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Image Section on the Right (20%) -->\r\n    <div class=\"col-12 d-none d-lg-block col-md-4 col-lg-4 col-xl-4 p-0\" style=\"height: 100vh; position: relative;\">\r\n      <div class=\"position-relative w-100 h-100\"\r\n        style=\"background-image: url('assets/Group 2328.png'); background-size: cover; background-position: center; background-repeat: no-repeat;\">\r\n        <!-- Icon at the top left of the image -->\r\n        <img src=\"assets/Frame 2244.png\" alt=\"Icon\" class=\"position-absolute\"\r\n          style=\"top: 60px; left: 40px; width: 270px; height: 150px; opacity: 1;\">\r\n      </div>\r\n\r\n      <!-- The same icon was duplicated, removed second instance -->\r\n      <div class=\"image-overlay\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0;\">\r\n        <!-- Add your image or other content here -->\r\n      </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <!--background image on the div background size cover-->\r\n\r\n  </div>\r\n\r\n</section>\r\n\r\n<style>\r\n  @media screen and (max-width: 768px) {\r\n    .col-md-4 {\r\n      display: none;\r\n    }\r\n  }\r\n</style>"
        },
        {
            "name": "ResetPasswordComponent",
            "id": "component-ResetPasswordComponent-00f88089cf3785f6c6e6b013bc213221b2620225022198e1e195ad2a23c8cded444517955aac05f28d338254320bbea5e0e417df9143581e6b8e40852fc9e375",
            "file": "src/app/reset-password/reset-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password",
            "styleUrls": [
                "./reset-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmPassword",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isChangePasswordFlow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "passwordMatchError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "passwordRequirements",
                    "defaultValue": "{\r\n    length: false,\r\n    number: false,\r\n    lowercase: false,\r\n    uppercase: false,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedLanguage",
                    "defaultValue": "'en'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "showConfirmPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "showSuccessMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveToResetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLanguageChange",
                    "args": [
                        {
                            "name": "newLanguage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newLanguage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleConfirmPasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validatePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "LeftSideComponent",
                    "type": "component"
                },
                {
                    "name": "SharedModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { LeftSideComponent } from '../shared/left-side/left-side.component';\r\nimport { SharedModule } from '../shared.module'; // Import SharedModule to access LanguageDropdownComponent\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, LeftSideComponent, SharedModule], // Use SharedModule to access LanguageDropdownComponent\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss'],\r\n})\r\nexport class ResetPasswordComponent {\r\n  email: string = '';\r\n  password: string = '';\r\n  confirmPassword: string = '';\r\n  errorMessage: string = '';\r\n  passwordMatchError: string = '';\r\n  showSuccessMessage: boolean = false;\r\n  isChangePasswordFlow: boolean = false;\r\n  selectedLanguage: string = 'en'; // Add selectedLanguage property\r\n\r\n  passwordRequirements = {\r\n    length: false,\r\n    number: false,\r\n    lowercase: false,\r\n    uppercase: false,\r\n  };\r\n\r\n  showPassword: boolean = false;\r\n  showConfirmPassword: boolean = false;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  // Language change handler\r\n  onLanguageChange(newLanguage: string) {\r\n    this.selectedLanguage = newLanguage;\r\n    console.log(`Language changed to: ${newLanguage}`);\r\n  }\r\n\r\n  // Toggle password visibility\r\n  togglePasswordVisibility() {\r\n    this.showPassword = !this.showPassword;\r\n  }\r\n\r\n  // Toggle confirm password visibility\r\n  toggleConfirmPasswordVisibility() {\r\n    this.showConfirmPassword = !this.showConfirmPassword;\r\n  }\r\n\r\n  // Check password requirements\r\n  validatePassword() {\r\n    const password = this.password;\r\n\r\n    this.passwordRequirements.length = password.length >= 8;\r\n    this.passwordRequirements.number = /[0-9]/.test(password);\r\n    this.passwordRequirements.lowercase = /[a-z]/.test(password);\r\n    this.passwordRequirements.uppercase = /[A-Z]/.test(password);\r\n  }\r\n\r\n  confirmEmail() {\r\n    const trimmedEmail = this.email.trim();\r\n  \r\n    if (!trimmedEmail) {\r\n      this.errorMessage = 'Please enter your email.';\r\n      return;\r\n    }\r\n  \r\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    const user = users.find((u: any) => u.email === trimmedEmail);\r\n  \r\n    if (user) {\r\n      this.errorMessage = '';\r\n      this.showSuccessMessage = true;\r\n      // Do not automatically switch to the next step\r\n    } else {\r\n      this.errorMessage = 'Email not found.';\r\n    }\r\n  }\r\n  \r\n  moveToResetPassword() {\r\n    this.showSuccessMessage = false;\r\n    this.isChangePasswordFlow = true;\r\n  }\r\n  \r\n\r\n  resetPassword() {\r\n    const trimmedPassword = this.password.trim();\r\n    const trimmedConfirmPassword = this.confirmPassword.trim();\r\n\r\n    if (!trimmedPassword || !trimmedConfirmPassword) {\r\n      this.errorMessage = 'Please fill in all fields.';\r\n      return;\r\n    }\r\n\r\n    if (trimmedPassword !== trimmedConfirmPassword) {\r\n      this.passwordMatchError = 'Passwords do not match.';\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !this.passwordRequirements.length ||\r\n      !this.passwordRequirements.number ||\r\n      !this.passwordRequirements.lowercase ||\r\n      !this.passwordRequirements.uppercase\r\n    ) {\r\n      this.errorMessage = 'Your password does not meet the required criteria.';\r\n      return;\r\n    }\r\n\r\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    const user = users.find((u: any) => u.email === this.email.trim());\r\n\r\n    if (user) {\r\n      user.password = trimmedPassword;\r\n      localStorage.setItem('users', JSON.stringify(users));\r\n      this.router.navigate(['/login']);\r\n    } else {\r\n      this.errorMessage = 'Something went wrong. Please try again.';\r\n    }\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".vh-100 {\r\n    background-color: #ffffff;\r\n    height: 100vh;\r\n    color: #333333;\r\n  }\r\n  \r\n  /* General Button Styling */\r\n  .next-button {\r\n    background-color: #ff8c00;\r\n    color: white;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    height: 48px;\r\n    border: none;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    transition: all 0.3s ease;\r\n    width: 100%;\r\n    margin-bottom: 15px;\r\n  \r\n    &:hover {\r\n      background-color: #ffb58d;\r\n      /* Lighter orange on hover */\r\n    }\r\n  }\r\n  \r\n  /* Form Container */\r\n  .card-body {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start; /* Align form content to the left */\r\n    align-items: flex-start; /* Align content to the left */\r\n    background-color: #f9f9f9;\r\n    border-radius: 10px;\r\n    padding: 2rem 2rem;\r\n    max-width: 500px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n  }\r\n  \r\n  /* Form Fields */\r\n  .form-floating {\r\n    &.mb-3 {\r\n      position: relative;\r\n      width: 100%;\r\n      margin-bottom: 20px;\r\n    }\r\n  \r\n    .form-control-lg {\r\n      background-color: #fff;\r\n      border: 1px solid #ccc;\r\n      color: #333;\r\n      padding: 18px 12px;\r\n      font-size: 18px;\r\n      border-radius: 8px;\r\n      width: 100%;\r\n      height: 50px;\r\n  \r\n      &:focus {\r\n        border-color: #ff8c00;\r\n        outline: none;\r\n      }\r\n  \r\n      &:focus ~ .floating-label,\r\n      &:not(:placeholder-shown) ~ .floating-label {\r\n        top: -18px;\r\n        left: 12px;\r\n        font-size: 14px;\r\n        color: #ff8c00;\r\n      }\r\n    }\r\n  }\r\n  \r\n  /* Success Message Styles */\r\n  .success-message {\r\n    text-align: center;\r\n    display: flex;\r\n    flex-direction: column; /* Ensures all items are aligned vertically */\r\n    align-items: center; /* Center-align all items horizontally */\r\n    gap: 10px; /* Add spacing between the items */\r\n  \r\n    &-frame {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      flex-direction: column;\r\n      background-color: #ffffff;\r\n      border: 2px solid #ddd;\r\n      border-radius: 20px;\r\n      padding: 20px 40px;\r\n      width: 100%;\r\n      max-width: 400px;\r\n      margin: 0 auto;\r\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n    }\r\n  \r\n    .success-icon {\r\n      width: 80px;\r\n      height: 80px;\r\n      border-radius: 50%;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      margin-bottom: 10px;\r\n  \r\n      img {\r\n        width: 60px;\r\n        height: 60px;\r\n        object-fit: contain;\r\n        margin-bottom: 15px;\r\n      }\r\n    }\r\n  \r\n    h3 {\r\n      font-size: 20px;\r\n      font-weight: 600;\r\n      margin: 0;\r\n      color: #333;\r\n    }\r\n  }\r\n  \r\n  /* Password Requirements */\r\n  .password-requirements {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 20px;\r\n    font-family: 'Archia', sans-serif;\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n    color: #3d3d3d;\r\n  \r\n    p {\r\n      width: 100%;\r\n      font-weight: bold;\r\n    }\r\n  \r\n    ul {\r\n      list-style: none;\r\n      padding: 0;\r\n      display: flex;\r\n      gap: 20px;\r\n      flex-wrap: wrap;\r\n      justify-content: space-between;\r\n  \r\n      li {\r\n        font-family: 'Archia', sans-serif;\r\n        font-weight: 400;\r\n        font-size: 16px;\r\n        width: 45%;\r\n        color: #6d6d6d;\r\n        position: relative;\r\n  \r\n        &::before {\r\n          content: \"•\";\r\n          color: green;\r\n          margin-right: 10px;\r\n        }\r\n  \r\n        &.text-success {\r\n          color: #4caf50;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /* Password Visibility Toggle */\r\n  .password-toggle {\r\n    position: absolute;\r\n    top: 50%;\r\n    right: 10px;\r\n    transform: translateY(-50%);\r\n    cursor: pointer;\r\n    color: #ff8c00;\r\n  \r\n    i {\r\n      font-size: 18px;\r\n    }\r\n  }\r\n  \r\n  /* Reset Your Password Section */\r\n  .reset-title {\r\n    width: 676px;\r\n    height: 40px;\r\n    font-family: 'Roundo', sans-serif;\r\n    font-weight: 600;\r\n    font-size: 32px;\r\n    line-height: 40px;\r\n    color: #3d3d3d;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  /* Custom Button Styling */\r\n  .btn.next-button {\r\n    background-color: #fbc8ad;\r\n    border: none;\r\n    border-radius: 8px;\r\n    color: white;\r\n    padding: 15px 24px;\r\n    font-size: 18px;\r\n    cursor: pointer;\r\n    width: 140px;\r\n    height: 56px;\r\n    text-align: center;\r\n  \r\n    &:hover {\r\n      background-color: #d65a2f;\r\n    }\r\n  }\r\n  \r\n  /* Password Form */\r\n  .password-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 40px;\r\n    position: absolute;\r\n    width: 676px;\r\n    height: 458px;\r\n    left: 32px;\r\n    top: calc(50% - 458px / 2);\r\n  }\r\n  \r\n  /* Responsive Adjustments */\r\n  @media (max-width: 768px) {\r\n    .vh-100 {\r\n      padding: 20px;\r\n    }\r\n  \r\n    .card-body {\r\n      max-width: 100%;\r\n    }\r\n  \r\n    .password-requirements {\r\n      margin-top: 10px;\r\n      font-size: 14px;\r\n  \r\n      ul li {\r\n        color: #929292;\r\n  \r\n        &.text-success {\r\n          color: #28a745;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ",
                    "styleUrl": "./reset-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css\">\r\n<link href=\"https://fonts.googleapis.com/css2?family=Roundo&display=swap\" rel=\"stylesheet\">\r\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Poppins:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\r\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&family=Nunito:wght@300;400;600;700&display=swap\" rel=\"stylesheet\">\r\n\r\n<section class=\"vh-100 d-flex align-items-center\" style=\"background-color: #ffffff; color: #333333;\">\r\n  <div class=\"row w-100 m-0\">\r\n    <!-- Left Side -->\r\n    <div class=\"col-12 col-md-7 col-lg-7 col-xl-8 d-flex justify-content-center align-items-center\">\r\n      <div class=\"col-12 col-md-9 col-lg-9 p-4\">\r\n        <!-- Language Dropdown Component -->\r\n        <div>\r\n          <app-language-dropdown [(selectedLanguage)]=\"selectedLanguage\" (selectedLanguageChange)=\"onLanguageChange($event)\"></app-language-dropdown>\r\n        </div>\r\n\r\n        <!-- Step 1: Email Input Form -->\r\n        <div *ngIf=\"!isChangePasswordFlow && !showSuccessMessage\" class=\"email-form\">\r\n          <h2 class=\"fw-bold mb-4 text-uppercase\">Enter Your Email</h2>\r\n          <p>Enter your email address and we will send you a link to reset your password.</p>\r\n          <form (ngSubmit)=\"confirmEmail()\" class=\"email-reset-form\">\r\n            <div class=\"form-floating mb-3\">\r\n              <input type=\"email\" id=\"email\" class=\"form-control form-control-lg\" [(ngModel)]=\"email\" name=\"email\" required placeholder=\"Your Email\" />\r\n              <label for=\"email\" class=\"floating-label\">Your Email</label>\r\n              <div *ngIf=\"errorMessage\" class=\"text-danger mt-2\">{{ errorMessage }}</div>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn next-button\">Continue</button>\r\n          </form>\r\n        </div>\r\n\r\n        <!-- Step 2: Success Message -->\r\n        \r\n<!-- Step 2: Success Message -->\r\n<div *ngIf=\"showSuccessMessage\" class=\"success-message-frame\">\r\n  <div class=\"success-message\">\r\n    <div class=\"success-icon\">\r\n      <img src=\"assets/15.ico\" alt=\"Success Icon\" />\r\n    </div>\r\n    <h3 class=\"mt-3\">Check Your Email</h3>\r\n    \r\n    <button class=\"btn next-button\" (click)=\"moveToResetPassword()\">Change</button>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n        <!-- Step 3: Password Reset Form -->\r\n        <div *ngIf=\"isChangePasswordFlow && !showSuccessMessage\" class=\"password-form\">\r\n          <h3>Reset Your Password</h3>\r\n          <form (ngSubmit)=\"resetPassword()\">\r\n            <div class=\"form-floating mb-3\">\r\n              <input type=\"password\" class=\"form-control form-control-lg\" id=\"newPassword\" [(ngModel)]=\"password\" (input)=\"validatePassword()\" [type]=\"showPassword ? 'text' : 'password'\" placeholder=\"New Password\" required />\r\n              <label for=\"newPassword\">New Password</label>\r\n              <span class=\"password-toggle\" (click)=\"togglePasswordVisibility()\">\r\n                <i [class]=\"showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n              </span>\r\n            </div>\r\n\r\n            <div class=\"form-floating mb-3\">\r\n              <input type=\"password\" class=\"form-control form-control-lg\" id=\"confirmPassword\" [(ngModel)]=\"confirmPassword\" [type]=\"showConfirmPassword ? 'text' : 'password'\" placeholder=\"Confirm Password\" required />\r\n              <label for=\"confirmPassword\">Confirm Password</label>\r\n              <span class=\"password-toggle\" (click)=\"toggleConfirmPasswordVisibility()\">\r\n                <i [class]=\"showConfirmPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n              </span>\r\n            </div>\r\n\r\n            <div class=\"password-requirements\">\r\n              <p>Your password must include:</p>\r\n              <ul>\r\n                <li [class.text-success]=\"passwordRequirements.length\">At least 8 characters</li>\r\n                <li [class.text-success]=\"passwordRequirements.number\">Numbers</li>\r\n                <li [class.text-success]=\"passwordRequirements.lowercase\">Lowercase characters</li>\r\n                <li [class.text-success]=\"passwordRequirements.uppercase\">Uppercase characters</li>\r\n              </ul>\r\n            </div>\r\n\r\n            <button type=\"submit\" class=\"btn next-button\">Reset </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Right Side -->\r\n    <div class=\"col-12 col-md-5 col-lg-5 col-xl-4 p-0\">\r\n      <app-left-side></app-left-side>\r\n    </div>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "RoleDropdownComponent",
            "id": "component-RoleDropdownComponent-c4fdf989b0057e402f5c0300d04dd0a33d02d06d5a5e549b2204b845909d293218a592c2b6ebbd80c0d91d6ed563ff0bfab71260218e7d3dfe5020c44cdb1fcc",
            "file": "src/app/role-dropdown/role-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-role-dropdown",
            "styleUrls": [
                "./role-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./role-dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedRole",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedRoleChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dropdownVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "roles",
                    "defaultValue": "[\r\n    { value: 'admin', label: 'Admin' },\r\n    { value: 'manager', label: 'Manager' },\r\n    { value: 'employee', label: 'Employee' },\r\n    { value: 'other', label: 'Other' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getRoleLabel",
                    "args": [
                        {
                            "name": "roleCode",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleCode",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRoleChange",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {  Input, Output, EventEmitter } from '@angular/core';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-role-dropdown',\r\n  templateUrl: './role-dropdown.component.html',\r\n  styleUrls: ['./role-dropdown.component.scss']\r\n})\r\n\r\nexport class RoleDropdownComponent {\r\n  @Input() selectedRole: string | null = null; // Default role is unselected\r\n  @Output() selectedRoleChange = new EventEmitter<string>();\r\n\r\n  dropdownVisible: boolean = false;\r\n\r\n  // Role options\r\n  roles = [\r\n    { value: 'admin', label: 'Admin' },\r\n    { value: 'manager', label: 'Manager' },\r\n    { value: 'employee', label: 'Employee' },\r\n    { value: 'other', label: 'Other' },\r\n  ];\r\n\r\n  // Toggle the visibility of the dropdown\r\n  toggleDropdown(): void {\r\n    this.dropdownVisible = !this.dropdownVisible;\r\n  }\r\n\r\n// RoleDropdownComponent TypeScript\r\nonRoleChange(role: string): void {\r\n  this.selectedRole = role; // Update the selected role\r\n  this.selectedRoleChange.emit(role); // Emit the updated role to parent component\r\n  this.dropdownVisible = false; // Close dropdown after selection\r\n}\r\n\r\n  // Get the label of the currently selected role\r\n  getRoleLabel(roleCode: string | null): string {\r\n    const role = this.roles.find((r) => r.value === roleCode);\r\n    return role ? role.label : 'Select Role';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Dropdown container to hold the entire dropdown element */\r\n.dropdown-container {\r\n    position: relative; /* Ensures the dropdown is positioned relative to this container */\r\n    border: 2.5px solid #B0B0B0; /* Neutral gray border by default */\r\n    border-radius: 8px; /* Apply rounded corners to all edges */\r\n    padding-top: 25px; /* Space for the label or arrow above */\r\n    margin-bottom: 1rem; /* Space below the dropdown container */\r\n    background-color: #ffffff; /* White background for the container */\r\n    width: 100%; /* Fixed width for the dropdown container */\r\n    height: 66px; /* Fixed height */\r\n    box-sizing: border-box; /* Ensure padding is included in the height calculation */\r\n    opacity: 1; /* Ensure opacity is visible */\r\n    transition: box-shadow 0.3s ease, border-color 0.3s ease; /* Smooth transition for shadow and border-color */\r\n    margin-bottom: 15px; /* Add bottom margin to create space between dropdown container and menu */\r\n\r\n    &:hover {\r\n        border-color: #2929F5; /* Change border to blue on hover */\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Optional: Adds a subtle shadow on hover */\r\n    }\r\n\r\n    /* Show the dropdown when visible */\r\n    .role-dropdown-wrapper {\r\n        visibility: visible;\r\n        opacity: 1;\r\n        transition: opacity 0.3s ease;\r\n        z-index: 9999; /* Ensure dropdown is on top of other content */\r\n    }\r\n}\r\n\r\n/* Role selector styles inside the container */\r\n.role-selector {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 12px;\r\n    cursor: pointer;\r\n    background-color: #ffffff; /* White background for the selector */\r\n    border-radius: 4px; /* Slightly rounded corners for the selector */\r\n    font-family: 'Inter', sans-serif; /* Font style */\r\n    font-size: 16px;\r\n    color: #171717; /* Text color */\r\n    font-weight: 400; /* Regular font weight */\r\n    transition: background-color 0.3s ease;\r\n    width: 100%; /* Ensure it takes full width */\r\n    height: 100%; /* Ensure it occupies the full height of the container */\r\n\r\n    &.open {\r\n        .arrow-icon {\r\n            transform: rotate(180deg); /* Rotate the arrow when open */\r\n        }\r\n    }\r\n}\r\n\r\n/* Label inside role selector, initially centered to the far left */\r\n.selected-role {\r\n    position: absolute;\r\n    left: 12px; /* Position the label to the far left */\r\n    top: 50%;\r\n    transform: translateY(-50%); /* Vertically center the label */\r\n    font-size: 16px;\r\n    color: #171717;\r\n    transition: all 0.3s ease; /* Smooth transition for movement */\r\n\r\n    &.focused {\r\n        top: 5px;\r\n        font-size: 12px;\r\n        font-weight: bold;\r\n        transform: translateX(0%); /* Center horizontally */\r\n    }\r\n}\r\n\r\n/* Arrow icon inside role selector, centered to the far right */\r\n.arrow-icon {\r\n    width: 16px;\r\n    height: 16px;\r\n    transition: transform 0.3s ease;\r\n    position: absolute;\r\n    right: 12px; /* Position the arrow to the far right */\r\n    top: 50%; /* Vertically center the arrow */\r\n    transform: translateY(-50%); /* Ensure the arrow is centered vertically */\r\n}\r\n\r\n/* Dropdown menu wrapper */\r\n.role-dropdown-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: absolute;\r\n    top: calc(100% + 10px); /* Add space between the dropdown and the container */\r\n    left: 0;\r\n    width: 100%;\r\n    background-color: #ffffff; /* Background color for the dropdown */\r\n    border-radius: 8px;\r\n    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1); /* Shadow for dropdown */\r\n    visibility: hidden; /* Initially hidden */\r\n    opacity: 0;\r\n    transition: opacity 0.3s ease;\r\n    z-index: 9999; /* Ensure dropdown is on top of other content */\r\n\r\n    .role-dropdown-option {\r\n        padding: 12px 16px;\r\n        cursor: pointer;\r\n        font-size: 16px;\r\n        color: #171717; /* Text color */\r\n        border-radius: 4px; /* Rounded corners for options */\r\n        transition: background-color 0.3s ease;\r\n\r\n        &:hover {\r\n            background-color: #DDE7FF; /* Highlight on hover */\r\n            color: #3D3D3D; /* White text on hover */\r\n        }\r\n\r\n        &.selected {\r\n            background-color: #DDE7FF; /* Highlight selected option */\r\n            color: #3D3D3D; /* White text for selected option */\r\n            font-weight: bold;\r\n        }\r\n    }\r\n}\r\n\r\n/* Responsive adjustments for smaller screens */\r\n@media (max-width: 768px) {\r\n    .dropdown-container {\r\n        width: 100%; /* Full width on small screens */\r\n        margin: 10px 0; /* Adjust margins for smaller screens */\r\n    }\r\n\r\n    .role-selector {\r\n        position: fixed;\r\n        top: 10px;\r\n        right: 10px;\r\n    }\r\n\r\n    .role-dropdown {\r\n        width: 120px;\r\n        padding-right: 0;\r\n        border: none;\r\n        background: url('/assets/black-arrow.png') no-repeat;\r\n        background-position: calc(100% - 10px) 50%;\r\n        background-size: 16px 16px;\r\n        border-radius: 20px;\r\n\r\n        option {\r\n            background: white;\r\n            color: black;\r\n            border: none;\r\n            outline: none;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./role-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"dropdown-container\">\r\n    <!-- Role Selector -->\r\n    <div class=\"role-selector\" (click)=\"toggleDropdown()\" [ngClass]=\"{ open: dropdownVisible }\">\r\n      <span class=\"selected-role\" [ngClass]=\"{ 'selected': selectedRole }\">\r\n        {{ getRoleLabel(selectedRole) }}\r\n      </span>\r\n      <img src=\"assets/black arrow.png\" alt=\"Arrow Icon\" class=\"arrow-icon\" />\r\n    </div>\r\n  \r\n    <!-- Dropdown Menu -->\r\n    <div *ngIf=\"dropdownVisible\" class=\"role-dropdown-wrapper\">\r\n      <div *ngFor=\"let role of roles\" \r\n           class=\"role-dropdown-option\"\r\n           [ngClass]=\"{ selected: role.value === selectedRole }\"\r\n           (click)=\"onRoleChange(role.value)\">\r\n        {{ role.label }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n  "
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-c1fa7c781ebad73e865ffddcdca4b1da79a024fd2d995fe9835cea1c9531ac3c57f927c07fc38d0e0c0a0f0f25719963327b83865683d7d2653cb63a2232461f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SharedModule } from './shared.module';\r\nimport { NgSelectModule } from '@ng-select/ng-select'; // Add this line\r\nimport { LeftSideComponent } from './shared/left-side/left-side.component';\r\nimport { bootstrapApplication } from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component'; // Make sure to import AppComponent here\r\n\r\n// AppModule no longer declares AppComponent or others; those are handled by bootstrapApplication\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    NgSelectModule, // Add NgSelectModule here\r\n    SharedModule,  // Import SharedModule to have LanguageDropdownComponent available\r\n    LeftSideComponent,  // Import LeftSideComponent\r\n  ],\r\n  providers: [],\r\n})\r\nexport class AppModule {}\r\n\r\n// Bootstrap using bootstrapApplication\r\nbootstrapApplication(AppComponent);\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LeftSideComponent"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-862be5b5d8dc77745ba78899c029e8220726facf75673701423b6c649b4971c2f475380a3b1bb746765a9e680172cd8dfa98457e97b2701e5b85edfb109886d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { routes } from './app.routes';\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-f5f02a10022c3a1faaed40fb0105f0a706259bcb231d9bc10ff4929dcf9939c9859381faa9fadc5e56efe3ac644e81ce56a1283902c613a1c1a814b3652eb00c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule as AngularCommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { LanguageDropdownComponent } from './common/language-dropdown/language-dropdown.component';\r\nimport { RoleDropdownComponent } from './role-dropdown/role-dropdown.component';\r\n@NgModule({\r\n  declarations: [LanguageDropdownComponent,RoleDropdownComponent],\r\n  imports: [AngularCommonModule, FormsModule],\r\n  exports: [LanguageDropdownComponent, AngularCommonModule,RoleDropdownComponent]\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LanguageDropdownComponent"
                        },
                        {
                            "name": "RoleDropdownComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LanguageDropdownComponent"
                        },
                        {
                            "name": "RoleDropdownComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),  // Using the exported routes from app.routes.ts\r\n    provideClientHydration()  // Optional: for client-side hydration\r\n  ]\r\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering()\r\n  ]\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),  // Using the exported routes from app.routes.ts\r\n    provideClientHydration()  // Optional: for client-side hydration\r\n  ]\r\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering()\r\n  ]\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/admin-dashboard/admin-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/admin.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AdminGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/common/language-dropdown/language-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguageDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/employee-dashboard/employee-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeeDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/employee.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "EmployeeGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/fake-backend.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "FakeBackendInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/manager-dashboard/manager-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManagerDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/manager.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ManagerGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/reset-password/reset-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/role-dropdown/role-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RoleDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/role.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RoleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/left-side/left-side.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeftSideComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}